/****************************************************************************
 * Unit test
 ****************************************************************************/
class UnitTest extends Strategy {
  
  static Enemy enemy;         
  static integer enemyId;
  static MeRound meRound;       // MeRound
  static EnemyRound enemyRound;    // EnemyRound
  static Round currentRound;  // Round
  static Round simRound;
  static Round oldRound;
  
  /**
   * isValide
   **/
  static boolean isValide() {
    return UNIT_TEST_DEBUG;
  }
  
  /**
   * apply
   **/
  void apply() {
    
    currentRound = Board.currentRound;
    meRound = currentRound.meRound;
    enemyRound = currentRound.enemiesRound[0];
    GameDebug.addOperation(true, "round init");
    Talk.text = "UnitTest mode";
    
    if(gFirstRound) {
      debug("Legend: relative center cell = green");
      GameDebug.addBackground(true, meRound.relativeCenterCellId, COLOR_GREEN);
      GameDebug.addOperation(true, "avant setWeapon");
      if(Board.me.weapons[0]) meRound.setWeaponRound(meRound.weaponsRound[0]);
	  else debugE("no weapon");
      GameDebug.addOperation(true, "setWeapon");
      board();
      cell();
      cellRound();
      chain();
      effect();
      functions();
      leek();
      leekRound();
      moveCell();
      round();
      tool();
      toolRound();
      oldRound = simRound = currentRound;
	  return
    }
    
  }
  
  /**
   * board
   **/
  boolean board() {
    debug("Legend: deadend = brown");
    GameDebug.addBackground(true, Board.deadEnds,COLOR_BROWN); // marron
    if(Board.cells[306].right.id == 324 && Board.cells[10].rightTop.id == 11) debugC("Board OK",COLOR_GREEN);
    else debugC("Board KO", COLOR_RED);
    return true;
  }
  
  /**
   * cell
   **/
  boolean cell() {
    Object inter = Board.cells[306].interCellInfo[300];
    if(inter.range == 12 && inter.isDiag == true && inter.isInline == false) debugC("Cell OK",COLOR_GREEN);
    else debugC("Cell KO", COLOR_RED);
    debugC("300 and 306 are " + ((inter.isInsight)?"":"NOT") + " inSight",COLOR_BLUE);
	debug("Legend: 300 and 306 = blue");
    GameDebug.addBackground(true, 306, COLOR_BLUE);
    GameDebug.addBackground(true, 300, COLOR_BLUE);
    debug("Legend: trajectory 306-> 241, 288->163, 305->531 = green");
    GameDebug.addBackground(true, Board.cells[306].getTrajectory(Board.cells[241]), COLOR_GREEN);
    GameDebug.addBackground(true, Board.cells[288].getTrajectory(Board.cells[163]), COLOR_GREEN);
    GameDebug.addBackground(true, Board.cells[305].getTrajectory(Board.cells[531]), COLOR_GREEN);
    return true;
  }
  
  /**
   * cellRound
   **/
  boolean cellRound() {
    return true;
  }

  /**
   * chain
   * TODO: chain test
   **/
  boolean chain() {
    return true;
  }
  
  /**
   * effect
   **/
  boolean effect() {
    EFFECT_DEBUG = true;
    GameDebug.add(true, meRound.weapon!.tool.effects,"current weapon effects",2);
    return true;
  }
  
  /**
   * functions
   * TODO: function test
   **/
  boolean functions() {
    return true;
  }
  
  /**
   * leek
   **/
  boolean leek() {
    //GameDebug.add(Board.me,"",2);
    return true;
  }
  
  /**
   * leekRound
   **/
  boolean leekRound() {
    meRound.getRelativeCenter()
    //GameDebug.add(meRound,"",2);
    GameDebug.addBackground(true, meRound.pathToCenter, COLOR_RED);
    return true;
  }
  
  /**
   * moveCell
   **/
  boolean moveCell() {
    return true;
  }
  
  /**
   * round
   **/
  boolean round() {
    return true;
  }
  
  /**
   * tool
   **/
  boolean tool() {
    return true;
  }
  
  /**
   * toolRound
   **/
  boolean toolRound() {
    //GameDebug.add(true, meRound.weapon,"",3);
    return true;
  }
  
}
