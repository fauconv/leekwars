include("relativecell");

/******************************************************************************
 * MoveCell
 * TODO: revoir tout ce code
 ******************************************************************************/
class MoveCell {
  
  integer id;
  integer remainingMP;
  CellRound cellRound;
  Round roundObj;
  LeekRound owner;
  Cell cell;
  
  Map<integer, RelativeCell> relativeCells = [:]; // Map(RelativeCell)
  
  
  /**
   * constructor
   **/
  constructor(CellRound cellRound, LeekRound owner, integer MP) {
    id = cellRound.id;
    this.cellRound = cellRound;
    this.owner = owner
    this.roundObj = cellRound.roundObj;
    this.cell = cellRound.cell;
    remainingMP = MP;
  }
  
  /**
   * getRelativeCells
   * TODO : check
   **/
  void setRelativeCells(Array<ToolRound> toolsRound) {
    for(ToolRound toolRound in toolsRound) {
      Tool tool = toolRound.tool;
      if(!tool.isAOE) {
        if(!relativeCells[id]) relativeCells[id] = new RelativeCell(id, this, toolRound, 1.0); 
        else (relativeCells[id]!).addTool(toolRound);
      } else {
        /*for(Array<any> infos in tool.getTouchedCells(id)) {
          integer id = infos[0] as integer;
          if(!relativeCells[id]) relativeCells[id] = new RelativeCell(id, this, toolRound, infos[1] as real); 
          else relativeCells[id].addTool(toolRound);
        }*/
      }
    }
  }
  
  /**
   * ToString
   * @return string
   **/
  string shortString() {
    return "MoveCell:(#"+id+")";
  }
  
  
}
