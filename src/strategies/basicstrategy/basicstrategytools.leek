/****************************************************************************
 * BasicStrategyTools
 ****************************************************************************/
class BasicStrategyTools extends Objects {

  /**
   * MPConditionsAddSim
   * macro pour MPConditions 
   **/
  static Simulation addSim(Array<Simulation> ret, Simulation sim, integer currentCellId, integer toolId) {
    sim = new Simulation(sim, sim.id+1);
    sim.addToolAction(toolId, currentCellId);
    push(ret, sim);
    return sim;
  }

  /**
   * route
   * encapsulation de leekRound.route
   **/
  static Map<integer,MoveCell> route(LeekRound leekRound, string minMax, Array<Simulation> MPToolList, 
										integer maxRemainingMP) {
    integer leekId = leekRound.id;
    Map<integer,integer> cellList = leekRound.route(maxRemainingMP);
    Map<integer,MoveCell> moveCells = [:];
	Array<Map<integer,Simulation>> sortedSim = [];
	for(integer usedMP = 0; usedMP <= maxRemainingMP; usedMP++) push(sortedSim, [:]);
	for(Simulation sim in MPToolList) {
	  integer mp = sim.roundObj.leeksRound[leekId]![minMax] as integer;
	  for(integer usedMP = 0; usedMP <= maxRemainingMP; usedMP++) {
	    if(mp >= usedMP) sortedSim[usedMP][sim.id] = sim;
	  }
	}
    for(integer cellId : integer remainingMP in cellList) {
	  integer usedMP = maxRemainingMP-remainingMP;
      moveCells[cellId] = new MoveCell(cellId, sortedSim[usedMP], usedMP, remainingMP, minMax);
	}
    return moveCells;
  }

  /**
   * colorize
   * on decompose en different cas (couleur) et on calcul les degat
   **/
  static void colorize(Map<integer,MoveCell> myMoveCells, Map<integer,MoveCell> myMoveCellsNeutral,
                       Map<integer,MoveCell> myMoveCellsBad, Map<integer,MoveCell> myMoveCellsGood, 
                       Map<integer,MoveCell> myMoveCellsAnnihilation, integer enemyRound) { 
    for(MoveCell mc in myMoveCells) {
      if(count(mc.targetCells) == 0) {
        if(mapSize(mc.enemyTools) == 0) {
          myMoveCellsNeutral[mc.id] = mc;
        } else {
          myMoveCellsBad[mc.id] = mc;
		  mc.computeDefence(enemyRound);
        }
      } else {
		mc.computeEscape(myMoveCells);
        mc.computeAttack();
        if(mapSize(mc.enemyTools) == 0) {
          myMoveCellsGood[mc.id] = mc;     
        } else {
		  mc.computeDefence(enemyRound);
		  boolean found = false;
		  for(Array<MoveCell> escapeList in mc.goodEscapes) {
			if(count(escapeList) > 0) {
		      myMoveCellsGood[mc.id] = mc;
			  found = true;
			  break;
			}
		  }
          if(!found) {
            myMoveCellsAnnihilation[mc.id] = mc;
          }
        }
      }
    }
  }
      
  /**
   * moveToCellPassBy
   * s approche de cellId en s arretant uniquement sur une des cases de cellList
   * @param extended : si true cherche aussi les MoveCell qui on des sim extended si il n a pas trouve dans les normals
   * @param forceExtended : cherche la meilleure qu elle soit extended ou pas
   * @return {cellId:<integer>, simId:<integer>} used sim et destination cell
   **/
  static Object moveToCellPassBy(integer cellId, Map<integer,MoveCell> cellList, boolean extended = false, 
								  boolean forceExtended = false) {
    if(mapContainsKey(cellList, cellId)) {
	  for(integer index : Simulation sim in cellList[cellId]!.moveSim) {
	    if(!sim.extended || forceExtended) return moveToCellPassByMacro(sim, cellId, index);
	  }
	}
    Array<integer> path = getPath(cellId,Board.currentRound.meRound.currentCellId)!;
    for(integer cell in path) {
	  if(mapContainsKey(cellList, cell)) {
        for(integer index : Simulation sim in cellList[cell]!.moveSim) {
	      if(!sim.extended || forceExtended) return moveToCellPassByMacro(sim, cell, index);
	    }
	  }
    }
	if(extended && !forceExtended) {
	  if(mapContainsKey(cellList, cellId)) {
	    for(integer index : Simulation sim in cellList[cellId]!.moveSim) {
	      if(sim.extended) return moveToCellPassByMacro(sim, cellId, index);
	    }
	  }
      for(integer cell in path) {
		if(mapContainsKey(cellList, cellId)) {
          for(integer index : Simulation sim in cellList[cell]!.moveSim) {
	        if(sim.extended) return moveToCellPassByMacro(sim, cell, index);
	      }
		}
      }
	}
	return {cellId:Board.currentRound.meRound.currentCellId, simId:0};
  }

  /**
   * moveToCellPassByMacro
   **/
  private static Object moveToCellPassByMacro(Simulation sim, integer cellId, integer index) {
    sim.execute();
    if(sim.roundObj.meRound.moveToCell(cellId) != cellId) 
	  debugC("BasicStrategyTools=>moveToCellPassBy=>pas la bonne destination", COLOR_RED);
	return {cellId:cellId, simId:index};
  }
	
  /**
   * moveAwayFromCellPassBy
   * s eloigne de cellId en s arretant uniquement sur une des cases de cellList
   * @param extended : si true cherche aussi les MoveCell qui on des sim extended
   * @param forceExtended : cherche la meilleure qu elle soit extended ou pas
   * @return {cellId:<integer>, simId:<integer>} used sim et destination cell
   **/
  static Object moveAwayFromCellPassBy(integer cellId, Map<any,MoveCell>cellList, boolean extended = false, 
								       boolean forceExtended = false){
    integer distance = 0;
	integer distanceExtended = 0;
    Integer|null cell2 = null;
	Integer|null cell2Extended = null;
	Simulation|null sim2 = null;
	Simulation|null sim2Extended = null;
    for(MoveCell cell in cellList) {
	  integer dist = cell.cell.interCellInfo[cellId].range;
	  for(integer index : Simulation sim in cell.moveSim) {
	    if(sim.extended) {
		  if(dist > distanceExtended) {
			distanceExtended = dist;
			cell2Extended = cell.id;
			sim2Extended = sim;
		  }
		} else {
		  if(dist > distance) {
			distance = dist;
			cell2 = cell.id;
			sim2 = sim;
		  }
		}
	  }
    }
	if(forceExtended && distance < distanceExtended) 
      return moveToCellPassByMacro(sim2Extended!, cell2Extended!, sim2Extended!.id);
	if(distance > 0) return moveToCellPassByMacro(sim2!, cell2!, sim2!.id);
	if(extended && distanceExtended > 0) return moveToCellPassByMacro(sim2Extended!, cell2Extended!, sim2Extended!.id);
    return {cellId:Board.currentRound.meRound.currentCellId, simId:0};
  }

  /**
   * addTool
   **/
  static integer addTool(integer weaponId, Map<integer,Tool> toolsInfo, Map<integer, any> toolsList, 
                           integer targetCell, integer minTP, EffectResult result, Simulation sim, 
                           LeekRound shooter, boolean keepWeapon = true) {
    if(mapContainsKey(toolsList, weaponId)) {
      debug(TOOL_NAME_TRANSLATOR[weaponId]+"-"+shooter.leek.name);
      if(!toolsInfo[weaponId]!.isChip && shooter.weaponId != weaponId) { // si il faut faire un setWeapon
        if(keepWeapon) return minTP;
        if(minTP >= (toolsInfo[weaponId]!.cost + SET_WEAPON_COST)) {
          sim.addSetWeaponAction(weaponId);
        } else return minTP;
      }
      if(minTP >= toolsInfo[weaponId]!.cost) {
        do {
          EffectResult ret = sim.addToolAction(weaponId, targetCell);
          result.add(ret);
          minTP = shooter.minTP;
        } while(minTP >= toolsInfo[weaponId]!.cost && toolsInfo[weaponId]!.cooldown == 0);
      } else {
        sim.addToolAction(weaponId, targetCell, true);
      }
    }
    return minTP;
  }
   
  /**
   * addEnemyTool
   **/
  static integer addEnemyTool(integer weaponId, Map<integer,Tool> toolsInfo, Map<integer, any> toolsList,
							  integer minTP, EffectResult result, Round roundObj, 
                              LeekRound shooter, Array<integer> targetId, Array<real> AOE, boolean keepWeapon = true) {
    if(mapContainsKey(toolsList, weaponId)) {
      if(!toolsInfo[weaponId]!.isChip && shooter.weaponId != weaponId) { // si il faut faire un setWeapon
        if(keepWeapon) return minTP;
        if(minTP >= (toolsInfo[weaponId]!.cost + SET_WEAPON_COST)) {
		  shooter.simulateSetWeapon(weaponId);
        } else return minTP;
      }
      if(minTP >= toolsInfo[weaponId]!.cost) {
        do {
          EffectResult ret = shooter.toolsRound[weaponId]!.simulateUse(targetId, AOE);
          result.add(ret);
          minTP = shooter.minTP;
        } while(minTP >= toolsInfo[weaponId]!.cost && toolsInfo[weaponId]!.cooldown == 0);
      }
    }
    return minTP;  
  }
	
  /**
   * instaKill
   * je regarde si il y a des insta kill
   **/
  static boolean instaKill(Map<integer,MoveCell> myAnnihilations) {
	for(MoveCell mc in myAnnihilations) {
	  for(integer index : integer score in mc.attackScores) {
	    if(score >= MoveCell.INSTA_KILL) {
		  mc.execute(index);
		  return true;
		}
	  }
	}
	return false;
  }

     
  /**
   * getRelativeCells
   * determine les cellules que l on peut viser pour atteindre this grace a l AOE des tools
   * ne verifie pas que le tool peut atteindre la cellule vise
   * @param tools la liste des tools dont on veut les relativeCell
-------------------------------------------- TODO --------------------------------------------------------
   * @return
   **/
  public Map<integer,RelativeCell> getRelativeCells(Array<Tool> tools, integer id) {
    Map<integer,RelativeCell> ret = [:];
    Cell|null reachableCell = this;
    for(Tool tool in tools) {
      if(ret[id]) ret[id]!.toolsList[tool.id] = tool;
      else ret[id] = new RelativeCell(id, 1.0, id, [tool.id:tool]);        
      if(tool.isAOE) {
        if(tool.AOELaunchType == LAUNCH_TYPE_CIRCLE) { //  ------------ LAUNCH_TYPE_CIRCLE
          for(string direction in HEIGHT_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
            }
          }
          for(string direction in WIDTH_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
              for(string direction2 in HEIGHT_DIRECTION) {
                Cell|null reachableCell2 = reachableCell;
                var pourcent2 = pourcent;
                for(var i2 = (i-1); i2 > 0; i2--) {
                  pourcent2 -= AOE_DEC_LINE_FACTOR;
                  reachableCell2 = addRelativeCell(ret,reachableCell2!,direction2,tool,pourcent2,id);
                  if(reachableCell2 == null) break;
                }
              }
            }
          }
        } else if(tool.AOELaunchType == LAUNCH_TYPE_SQUARE) { //  ---------  LAUNCH_TYPE_SQUARE
          for(var direction in HEIGHT_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
            }
          }
          for(string direction in WIDTH_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
              for(var direction2 in HEIGHT_DIRECTION) {
                Cell|null reachableCell2 = reachableCell;
                var pourcent2 = pourcent;
                for(var i2 = tool.AOERange; i2 > 0; i2--) {
                  pourcent2 -= AOE_DEC_LINE_FACTOR;
                  reachableCell2 = addRelativeCell(ret,reachableCell2!,direction2,tool,pourcent2,id);
                  if(reachableCell2 == null) break;
                }
              }
            }
          }
        } else if(tool.AOELaunchType == LAUNCH_TYPE_DIAGONAL) { //  ---------   LAUNCH_TYPE_DIAGONAL 
          for(var direction in DIAG_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_DIAG_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
            }
          }
        } else  { // ------       LAUNCH_TYPE_LINE
          for(var direction in LINE_DIRECTION) {
            reachableCell = this;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell!,direction,tool,pourcent,id);
              if(reachableCell == null) break;
            }
          }
        }
      }
    }
    return ret;
  }

  /**
   * addRelativeCell
   * macro pour getRelativeCells
   **/
  private Cell|null addRelativeCell(Map<integer,RelativeCell> ret, Cell reachableCell, string direction, Tool tool, real pourcent, integer targetCellId) {
    if(reachableCell[direction]) {
      reachableCell = reachableCell[direction] as Cell;
      if(!reachableCell.isWall) {
          if(ret[reachableCell.id]) ret[reachableCell.id]!.toolsList[tool.id] = tool;
          else ret[reachableCell.id] = new RelativeCell(reachableCell.id, pourcent, targetCellId, [tool.id:tool]);
      }
      return reachableCell;
    }
    return null;
  }


}

