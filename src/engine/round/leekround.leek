/******************************************************************************
 * LeekRound
 ******************************************************************************/
class LeekRound extends Objects {

  public static string STATE_APPROACH = "Approaching";
  public static string STATE_UNKNOWN  = "Unknown";
  public static string STATE_ESCAPE   = "Escaping";
    
  public Leek leek;
  public CellRound currentCell;
  public integer currentCellId;
  
  public integer minTP;
  public integer maxTP;
  public integer midTP;
  public integer maxTotalLife;
  public integer minTotalLife;
  public integer midTotalLife;
  public integer maxLife;
  public integer midLife;
  public integer minLife;
  public integer minResistance;
  public integer maxResistance;
  public integer midResistance;
  public integer minAgility;
  public integer maxAgility;
  public integer midAgility;
  public integer minStrength;
  public integer maxStrength;
  public integer midStrength;
  public integer minMagic;
  public integer maxMagic;
  public integer midMagic;
  public integer minScience;
  public integer maxScience;
  public integer midScience;
  public integer minWisdom;
  public integer maxWisdom;
  public integer midWisdom;
  public integer minAbsoluteShield;
  public integer maxAbsoluteShield;
  public integer midAbsoluteShield;
  public integer minRelativeShield;
  public integer maxRelativeShield;
  public integer midRelativeShield;
  public integer minDmgReturn;
  public integer maxDmgReturn;
  public integer midDmgReturn;
  public integer minMP;
  public integer maxMP;
  public integer midMP;
  public integer minPower;
  public integer maxPower;
  public integer midPower;

  public integer maxInjury;
  public integer midInjury;
  public integer minInjury;
  
  public integer maxAOERange;
  public ToolRound|null weapon;
  public integer|null weaponId;
  public Round roundObj;

  public Map<integer,Array<Array<integer|boolean>>> effects = [:];
  
  public Map<integer, ToolRound> toolsRound = [:];
  public Array<WeaponRound> weaponsRound = [];
  public Array<ChipRound|null> chipsRound = [];
  
  public Map<string,Array<ToolRound>> categories = [:];
  
  /**
   * constructor
   * @param roundObj : le round auquel appartient le leekRound
   * @param leek :
   *   - si c est un leek : cree le leekround correspondant
   *   - si c est un leekround : clone le leekround
   **/
  protected constructor(Round roundObj, Leek|LeekRound leek) {
  
    id = leek.id;
    this.roundObj = roundObj;
    
    if(leek.class.super.name == "LeekRound") {
      
      //
      // clonage
      //
      this.leek = (leek as LeekRound).leek;
      
      minTP = (leek as LeekRound).minTP
      maxTP = (leek as LeekRound).maxTP
      midTP = (leek as LeekRound).midTP;
      maxTotalLife = (leek as LeekRound).maxTotalLife
      minTotalLife = (leek as LeekRound).minTotalLife
      midTotalLife = (leek as LeekRound).midTotalLife
      maxLife = (leek as LeekRound).maxLife
      midLife = (leek as LeekRound).midLife
      minLife = (leek as LeekRound).minLife
      minResistance = (leek as LeekRound).minResistance
      maxResistance = (leek as LeekRound).maxResistance
      midResistance = (leek as LeekRound).midResistance
      minAgility = (leek as LeekRound).minAgility
      maxAgility = (leek as LeekRound).maxAgility
      midAgility = (leek as LeekRound).midAgility
      minStrength = (leek as LeekRound).minStrength
      maxStrength = (leek as LeekRound).maxStrength
      midStrength = (leek as LeekRound).midStrength
      minMagic = (leek as LeekRound).minMagic
      maxMagic = (leek as LeekRound).maxMagic
      midMagic = (leek as LeekRound).midMagic
      minScience = (leek as LeekRound).minScience
      maxScience = (leek as LeekRound).maxScience
      midScience = (leek as LeekRound).midScience
      minWisdom = (leek as LeekRound).minWisdom
      maxWisdom = (leek as LeekRound).maxWisdom
      midWisdom = (leek as LeekRound).midWisdom
      minAbsoluteShield = (leek as LeekRound).minAbsoluteShield
      maxAbsoluteShield = (leek as LeekRound).maxAbsoluteShield
      midAbsoluteShield = (leek as LeekRound).midAbsoluteShield
      minRelativeShield = (leek as LeekRound).minRelativeShield
      maxRelativeShield = (leek as LeekRound).maxRelativeShield
      midRelativeShield = (leek as LeekRound).midRelativeShield
      minDmgReturn = (leek as LeekRound).minDmgReturn
      maxDmgReturn = (leek as LeekRound).maxDmgReturn
      midDmgReturn = (leek as LeekRound).midDmgReturn
      minMP = (leek as LeekRound).minMP
      maxMP = (leek as LeekRound).maxMP
      midMP = (leek as LeekRound).midMP
      minPower = (leek as LeekRound).minPower
      maxPower = (leek as LeekRound).maxPower
      midPower = (leek as LeekRound).midPower
      maxInjury = (leek as LeekRound).maxInjury
      midInjury = (leek as LeekRound).midInjury
      minInjury = (leek as LeekRound).minInjury
      
      maxAOERange = leek.maxAOERange
      weaponId = (leek as LeekRound).weaponId
      
      currentCellId = (leek as LeekRound).currentCellId
      currentCell = roundObj.cellsRound[currentCellId];
      currentCell.leekOnCell = this;
      
      effects = clone((leek as LeekRound).effects,3) as Map<integer,Array<Array<integer|boolean>>>
      
      for(ToolRound toolRound in (leek as LeekRound).toolsRound) {
        if(toolRound.tool.isChip) {
          categoriseTool(new ChipRound(toolRound, this)); 
        } else {
          categoriseTool(new WeaponRound(toolRound, this));
        }
      }
      if(weaponId != null) weapon = toolsRound[weaponId!];
        
    } else {
      
      //
      // cas normal
      //
      this.leek = leek as Leek;
      for(string category in CATEGORIES) categories[category] = [];

      minTP = maxTP = midTP = getTP(id)!;
      maxTotalLife = minTotalLife = midTotalLife = getTotalLife(id)!;
      maxLife = midLife = minLife = getLife(id)!;
      minResistance = maxResistance = midResistance = getResistance(id)!;
      minAgility = maxAgility = midAgility = getAgility(id)!;
      minStrength = maxStrength = midStrength = getStrength(id)!;
      minMagic = maxMagic = midMagic = getMagic(id)!;
      minScience = maxScience = midScience = getScience(id)!;
      minWisdom = maxWisdom = midWisdom = getWisdom(id)!;
      minAbsoluteShield = maxAbsoluteShield = midAbsoluteShield = getAbsoluteShield(id)!;
      minRelativeShield = maxRelativeShield = midRelativeShield = getRelativeShield(id)!;
      minDmgReturn = maxDmgReturn = midDmgReturn = getDamageReturn(id)!;
      minMP = maxMP = midMP = getMP(id)!;
      minPower = maxPower = midPower = getPower(id)!;

      maxInjury = midInjury = minInjury = 0;

      currentCellId = getCell(id)!;
      currentCell = roundObj.cellsRound[currentCellId];
      currentCell.leekOnCell = this;

      for(Tool tool in (leek as Leek).tools) {
        if(tool.isChip) {
          if(getCooldown(tool.id) == 0) {
            ChipRound c = new ChipRound(tool, this);
            categoriseTool(c);
            push(chipsRound, c);
          }
        } else {
          WeaponRound w = new WeaponRound(tool, this);
          categoriseTool(w);
          push(weaponsRound, w);
        }
      }

      if(weaponId = getWeapon(id)) weapon = toolsRound[weaponId!];

      Array<Array<integer | boolean>> effects = getEffects(id)!;
      for(Array<integer | boolean> effect in effects) {
        if (mapContainsKey(this.effects,effect[0])) {
          push(this.effects[effect[0] as integer]!, effect);
        } else {
          this.effects[effect[0] as integer] = [effect];
        }
      }
    }
    
  }

  /**
   * update
   * mets a jour le leekround par rapport aux actions qui viennent d etre executer :
   * - met a jour la liste des chip dispo
   * - met a jour les valeurs caracteristique du leek
   * le leekOnCell et le setWeapon son deja mis a jour par l execution des actions 
   **/
  public update() {
      
    minTP = maxTP = midTP = getTP(id)!;
    maxTotalLife = minTotalLife = midTotalLife = getTotalLife(id)!;
    maxLife = midLife = minLife = getLife(id)!;
    minResistance = maxResistance = midResistance = getResistance(id)!;
    minAgility = maxAgility = midAgility = getAgility(id)!;
    minStrength = maxStrength = midStrength = getStrength(id)!;
    minMagic = maxMagic = midMagic = getMagic(id)!;
    minScience = maxScience = midScience = getScience(id)!;
    minWisdom = maxWisdom = midWisdom = getWisdom(id)!;
    minAbsoluteShield = maxAbsoluteShield = midAbsoluteShield = getAbsoluteShield(id)!;
    minRelativeShield = maxRelativeShield = midRelativeShield = getRelativeShield(id)!;
    minDmgReturn = maxDmgReturn = midDmgReturn = getDamageReturn(id)!;
    minMP = maxMP = midMP = getMP(id)!;
    minPower = maxPower = midPower = getPower(id)!;

    maxInjury = midInjury = minInjury = 0;
    
    Array<Array<integer | boolean>> effects = getEffects(id)!;
    this.effects = [:];
    for(Array<integer | boolean> effect in effects) {
      if (mapContainsKey(this.effects,effect[0])) {
        push(this.effects[effect[0] as integer]!, effect);
      } else {
        this.effects[effect[0] as integer] = [effect];
      }
    }
        
    Array<ChipRound|null> tmp = chipsRound;
    for(integer index : ChipRound|null chipRound in tmp) {
      if(chipRound != null && getCooldown(chipRound!.id) == 0) {
        chipsRound[index] = null;
        mapRemove(toolsRound, chipRound!.id);
      }
    }

  }
    
  /**
   * categoriseTool
   **/
  private categoriseTool(ToolRound toolRound) {
    toolsRound[toolRound.id] = toolRound;
    Tool tool = toolRound.tool;
    for(string category in tool.categories) push(categories[category], toolRound);
    (tool.categories[CATEGORY_DAMAGE]) and
      (tool.maxAOERange > maxAOERange) and (maxAOERange = tool.maxAOERange);
  }
  
  /**
   * simulateSetWeapon
   * @param weaponId : l id du weapon a set
   **/
  public void simulateSetWeapon(integer weaponId) {
    minTP -= SET_WEAPON_COST;
    maxTP -= SET_WEAPON_COST;
    midTP -= SET_WEAPON_COST;
    this.weaponId = weaponId;
    this.weapon = toolsRound[weaponId];
  }

  /**
   * simulateMoveToCell
   * se place sur cellId, on ne verifie pas qu on a assez de MP
   * @param cellId : l id de la cell ou on place le leekround
   * @param usingMP : nombre de MP a deduire du leekRound
   **/
  public void simulateMoveToCell(integer cellId, integer usingMP) {
    minMP -= usingMP;
    maxMP -= usingMP;
    midMP -= usingMP;
    currentCell.leekOnCell = null;
    currentCellId = cellId;
    currentCell = roundObj.cellsRound[cellId];
    currentCell.leekOnCell = this;
  }
  
  /**
   * route
   * parcour tous les chemins possible en partant de la position courante avec remainingMP.
   * @param remaingMP : nombre de MP qui peuvent etre utilise
   * @return Map[cellId] = remainingMP
   **/
  public Map<integer,integer> route(integer remainingMP) {
    Cell voisin;
    Array<CellRound> referenceBoard = roundObj.cellsRound;
    Map<integer,Array<Cell>> reachableCells = [remainingMP:[currentCell.cell]] //reachableCells[remainingMP][] = cell
    Map<integer,integer> flatReachableCells = [currentCellId:remainingMP];
    for(integer i = remainingMP; i > 0; i--) {
      integer futurMP = i-1
      reachableCells[futurMP] = [];
      for(Cell cell in reachableCells[i]!) {
        for(string direction in LINE_DIRECTION) {
          if(!(voisin = cell[direction] as Cell) || voisin.isWall) continue
          integer voisinId = voisin.id;
          LeekRound|null leekvoisin = referenceBoard[voisinId].leekOnCell;
          if(!mapContainsKey(flatReachableCells, voisinId) && (!leekvoisin)) { 
            push(reachableCells[futurMP]!, voisin);
            flatReachableCells[voisinId] = futurMP;
          }
        }
      }
    }
    return flatReachableCells
  }
  
}

/******************************************************************************
 * AllieRound
 ******************************************************************************/
class AllieRound extends LeekRound {
  
  /**
   * constructor
   * @param roundObj : le round auquel appartient le leekRound
   * @param leek :
   *   - si c est un leek : cree le AllieRound correspondant
   *   - si c est un AllieRound : clone le AllieRound
   **/
  public constructor(Round roundObj, Leek|AllieRound leek) {
    super(roundObj, leek);
  }
  
}

/******************************************************************************
 * EnemyRound
 ******************************************************************************/
class EnemyRound extends LeekRound {

  public string state = LeekRound.STATE_UNKNOWN; // comportement de l enemy
    
  /**
   * constructor
   * @param roundObj : le round auquel appartient le leekRound
   * @param leek :
   *   - si c est un leek : cree le EnemyRound correspondant
   *   - si c est un EnemyRound : clone le EnemyRound
   **/
  public constructor(Round roundObj, EnemyRound|Leek leek) {
    super(roundObj, leek);
    if(leek.class.name == "EnemyRound") {
      state = leek.state;
    }
  }
 
  /**
   * updateState
   * met a jour le comportement de l enemy a partir de son etat precedant
   * @param previousEnemyRound : le EnemyRound du round precedant
   * @param myInter : le tableau d intercell qui correspond a la currentCell de Me
   **/
  public void updateState(EnemyRound previousEnemyRound, Array<InterCellInfo> myInter) {
      integer d1 = myInter[currentCellId].range;
      integer d2 = myInter[previousEnemyRound.currentCellId].range;
      if(d1 > d2) {
        state = LeekRound.STATE_ESCAPE;
      } else if(d1 < d2) {
        state = LeekRound.STATE_APPROACH;
      } else {
        state = LeekRound.STATE_UNKNOWN;
      }
  }
}

/******************************************************************************
 * MeRound
 ******************************************************************************/
class MeRound extends LeekRound {
  
  public integer relativeCenterCellId = -1;
  public Array<integer>|null pathToCenter;
  
  /**
   * constructor
   * @param roundObj : le round auquel appartient le leekRound
   * @param clone : clone le MeRound
   **/
  public constructor(Round roundObj, MeRound|null clone = null) {
    if(clone != null) {
      super(roundObj, clone!);
    } else {
      super(roundObj, Board.me);
    }
  }
  
  /**
   * getRelativeCenter
   * calcul le chemin le plus court pour aller au centre de la map
   * peuple relativeCenterCellId et pathToCenter
   * @return la position du centre relatif (la case ateignable la plus au centre)
   **/
  public integer getRelativeCenter() {
    if(relativeCenterCellId > -1) return relativeCenterCellId;
    (!Board.centerCell.isDeadEnd) and (pathToCenter = getPath(currentCellId, CENTER_CELL_ID));
    if (pathToCenter) {
      relativeCenterCellId    = CENTER_CELL_ID;
      (leek as Me).historicalRelativeCenterCellId = relativeCenterCellId;
      return relativeCenterCellId;
    }
    Array<integer> trajectoryToCenter = currentCell.cell.getTrajectory(Board.centerCell)
    boolean ok = false;
    Cell finalCell;
    while(!isEmpty(trajectoryToCenter)) {
      finalCell = Board.cells[pop(trajectoryToCenter) as integer];
      if(!finalCell.isDeadEnd) {
        if (pathToCenter = getPath(currentCellId, finalCell.id)) {
          ok = true;
          break;
        }
      }
    }
    if(ok) {
      relativeCenterCellId    = finalCell.id;
      (leek as Me).historicalRelativeCenterCellId = relativeCenterCellId;
    } // else relativeCenterCell = null
    return relativeCenterCellId;
  }

  /**
   * setWeaponRound
   **/
  boolean setWeaponRound(integer weaponId) {
    if(setWeapon(weaponId)) {
      minTP = maxTP = midTP = getTP(id)!;
      this.weaponId = weaponId;
      this.weapon = this.toolsRound[weaponId];
      return true;
    }
    return false;
  }

  /**
   * moveToCell
   * s approche de cellId
   * @return new currentCellId
   **/
  integer moveToCell(integer cellId) {
    GameDebug.add(LEEKROUND_DEBUG,cellId,"je veux aller a");
    if(moveTowardCell(cellId)) {
      minMP = maxMP = midMP = getMP(id)!;
      currentCell.leekOnCell = null;
      currentCellId = getCell(id)!;
      currentCell = roundObj.cellsRound[currentCellId];
      currentCell.leekOnCell = this;
      return currentCellId;
    }
    return currentCellId;
  }

}
