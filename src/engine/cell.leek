include("intercellinfo");

/******************************************************************************
 * Cell
 * modelise une cellule du plateau
 * stock les informations d une cellule qui ne change pas a chaque tour
 ******************************************************************************/
class Cell extends Objects {
  
  public integer x;
  public integer y;
  public boolean isDeadEnd;
  public boolean isWall;
  public Cell top;
  public Cell bottom;
  public Cell left;
  public Cell right;
  public Cell leftTop;
  public Cell rightTop;
  public Cell leftBottom;
  public Cell rightBottom;
  
  public Array<InterCellInfo> interCellInfo = []
  
  /**
   * constructor
   * @param idCell id de la cell a creer
   * @param interCellNull l objet intercell unique pour les interecell non concerne
   **/
  protected constructor(integer idCell, InterCellInfo interCellNull) {
      
    id = idCell;
    x = getCellX(idCell) as integer;
    y = getCellY(idCell) as integer;
    
    fill(interCellInfo, interCellNull, NB_CELLS);
      
  }
  
  /**
   * getTrajectory
   * equivalent de getPath mais en ligne droite entre this et endCell
   * calcule d interpolation lineaire pour obtenir le meme resultat que lineOfSight
   * @param endCell la cellule objectif du chemin
   * @return la liste des cellules en ligne droite entre la cellule courante et endCell. La cellule de depart et d arrivee ne sont pas incluse dans la liste
   * O(n) n = longueur de la liste
   *
   **/
  public Array<Integer> getTrajectory(Cell endCell) {
    integer x2 = endCell.x;
    integer y2 = endCell.y;
    integer dx = x2-x;
    integer dy = y2-y;
    integer incX = 1;
    integer incY = 1;
    Array<integer> ret = [];
    
    if(y > y2) {
      incY = -1;
      dy = y-y2;
    }
    (x > x2) and (incX = -1);
    if(abs(dy) > abs(dx)) {
      real rap = (x2-x)/(y2-y);
      for(integer newY = y+incY; newY != y2; newY=newY+incY) {
        push(ret,getCellFromXY(round((newY-y)*rap+x), newY));
      }
    } else if (dx != 0) {
      real rap = (y2-y)/(x2-x);
      for(integer newX = x+incX; newX != x2; newX=newX+incX) {
        push(ret,getCellFromXY(newX, round((newX-x)*rap+y)));
      }
    }
    
    return ret;
  }

  /**
   * toString
   *
   * @return string
   **/
  string string(string space = "") {
    return this.class.name+":{ id:"+id+"\n  x:"+x+" y:"+y+" isWall:"+isWall+"}\n";
  }
}

/******************************************************************************
 * FreeCell
 ******************************************************************************/
class FreeCell extends Cell {
  
  /**
   * constructor
   * @param idCell id de la cell a creer
   * @param interCellNull l objet intercell unique pour les interecell non concerne
   **/
  public constructor(integer idCell, InterCellInfo interCellNull) {
    super(idCell, interCellNull);
    isWall = false;
    isDeadEnd = false;
  }
 
}

/******************************************************************************
 * Wall
 ******************************************************************************/
class Wall extends Cell {
  
  /**
   * constructor
   * @param idCell id de la cell a creer
   * @param interCellNull l objet intercell unique pour les interecell non concerne
   **/
  public constructor(integer idCell, InterCellInfo interCellNull) {
    super(idCell, interCellNull);
    isWall = true;
    isDeadEnd = true;
  }
  
}
