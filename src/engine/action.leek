/******************************************************************************
 * Action (Abstract)
 ******************************************************************************/
class Action extends Objects {
  
  protected integer ownerId;

  /**
   * simulateUse
   * @param roundObj : le round sur lequel simuler l action
   **/
  EffectResult simulate(Round roundObj) {
    return new EffectResult();
  }
    
  /**
   * execute
   **/
  void execute() {
  }

}

/******************************************************************************
 * SetWeaponAction
 ******************************************************************************/
class SetWeaponAction extends Action {
  
  private integer toolId;

  /**
   * constructor
   **/
  constructor(integer ownerId, integer toolId) {
    this.toolId = toolId;
    this.ownerId = ownerId;
  }

  /**
   * simulate
   * @param roundObj : le round sur lequel simuler l action
   **/
  EffectResult simulate(Round roundObj) {
    roundObj.leeksRound[ownerId]!.simulateSetWeapon(toolId);
    return new EffectResult();
  }

  /**
   * execute
   **/
  void execute() {
    Board.currentRound.meRound.setWeaponRound(toolId);
  }
    
  /**
   * string
   **/
  string string(string space = "") {
    return shortString();
  }
  string shortString(string space = "") {
    return this.class.name+": "+Board.leeks[ownerId]!.name+" set "+TOOL_NAME_TRANSLATOR[toolId]!;
  }

}

/******************************************************************************
 * MoveAction
 ******************************************************************************/
class MoveAction extends Action {

  private integer cellId;
  private integer usedMP;

  /**
   * constructor
   **/
  constructor(integer cellId, integer ownerId, integer usedMP) {
    this.cellId = cellId;
    this.ownerId = ownerId;
    this.usedMP = usedMP;
  }

  /**
   * simulate
   * @param roundObj : le round sur lequel simuler l action
   **/
  EffectResult simulate(Round roundObj) {
    roundObj.leeksRound[ownerId]!.simulateMoveToCell(cellId, usedMP)
    return new EffectResult();
  }

  /**
   * execute
   **/
  void execute() {
    Board.currentRound.meRound.moveToCell(cellId);
  }
    
  /**
   * string
   **/
  string string(string space = "") {
    return shortString();
  }
  string shortString(string space = "") {
    return this.class.name+": "+Board.leeks[ownerId]!.name+" go to "+cellId;
  }

}

/******************************************************************************
 * ToolAction
 ******************************************************************************/
class ToolAction extends Action {

  private integer toolId;
  private integer targetCell;

  /**
   * constructor
   **/
  constructor(integer ownerId, integer toolId, integer targetCell) {
    this.toolId = toolId;
    this.targetCell = targetCell;
    this.ownerId = ownerId;
  }

  /**
   * simulate
   * @param roundObj : le round sur lequel simuler l action
   **/
  EffectResult simulate(Round roundObj) {
    return roundObj.leeksRound[ownerId]!.toolsRound[toolId]!.simulateUseOnCell(targetCell);
  }

  /**
   * execute
  * Attention: ne fait pas l update du round
   * on ne fait un update du round qu apres avoir executer toutes les actions
   * pour economiser des operations
   **/
  void execute() {
    Board.currentRound.meRound.toolsRound[toolId]!.useOnCell(targetCell);
  }
    
  /**
   * string
   **/
  string string(string space = "") {
    return shortString();
  }
  string shortString(string space = "") {
    return this.class.name+": "+Board.leeks[ownerId]!.name+" use "+TOOL_NAME_TRANSLATOR[toolId]!+" on "+targetCell;
  }

}
