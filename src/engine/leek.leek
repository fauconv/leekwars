/******************************************************************************
 * Leek
 ******************************************************************************/
class Leek extends Objects {
  
  string name;
  string farmer;
  boolean isMe;
  boolean isAllie;
  boolean isEnemy;
  boolean isSummon;
  boolean needLos = true;
  integer maxAOERange;
  
  Array<Weapon> weapons = [];
  Array<Chip> chips = [];
  Map<integer,Tool> tools = [:];
  
  Map<string,Array<Tool>> categories = [:];
  
  /**
   * constructor
   **/
  constructor(integer id) {
    this.id  = id
    name     = getName(id)!;
    farmer   = getFarmerName(id)!;

    for(string category in CATEGORIES) categories[category] = [];
    
    Array<integer>|null weapons = getWeapons(id);
    if(weapons != null) for(integer weaponId in weapons!) {
      Weapon weapon = new Weapon(weaponId, this);
      categoriseTool(weapon);
      push(this.weapons, weapon);
      needLos = weapon.needLos && needLos;
    }

    Array<integer>|null chips = getChips(id);
    if(chips != null) for(integer chipId in chips!) {
      Chip chip = new Chip(chipId, this);
      categoriseTool(chip);
      push(this.chips, chip);
      needLos = chip.needLos && needLos;
    }
    
  }
  
  /**
   * categoriseTool
   **/
  void categoriseTool(Tool tool) {
    tools[tool.id] = tool;
    for(string category in tool.categories) push(this[category] as Array<Tool>, tool);
    ((tool.categories[CATEGORY_DAMAGE]) && (tool.maxAOERange > maxAOERange)) and (maxAOERange = tool.maxAOERange);
  }
    
  /**
   * toString
   *
   * @return string
   **/
  string shortString(string space = "") {
    return this.class.name+"("+name+")";
  }
  string string(string space = "") {
    string ret = this.class.name+"("+name+") maxAOE:"+maxAOERange+"\n";
    for(string category in CATEGORIES) {
      ret += space+category+":\n"
      for(Tool tool in categories[category]!) {
        ret += space+tool.shortString() + "\n";
      }
    }
    return ret;  
  }
  
}

/******************************************************************************
 * Allie
 ******************************************************************************/
class Allie extends Leek {
  
  /**
   * constructor
   **/
  constructor(integer id) {
    isMe     = false;
    isAllie  = true;
    isEnemy  = false;
    isSummon = false;
    this.id  = id
    name     = getName(id)!;
    farmer   = getFarmerName(id)!;
  }
  
}

/******************************************************************************
 * Enemy
 ******************************************************************************/
class Enemy extends Leek {
  
  /**
   * constructor
   **/
  constructor(integer id) {
    isMe     = false;
    isAllie  = false;
    isEnemy  = true;
    isSummon = false;
    super(id);
  }
  
}

/******************************************************************************
 * Me
 ******************************************************************************/
class Me extends Leek {
  
  /**
   * constructor
   **/
  constructor() {
    isMe     = true;
    isAllie  = true;
    isEnemy  = false;
    isSummon = false;
    super(getEntity());
  }
  
}



