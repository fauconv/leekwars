/******************************************************************************
 * Action
 ******************************************************************************/
class Action extends Objects {

}

/******************************************************************************
 * MoveAction
 ******************************************************************************/
class MoveAction extends Action {

  LeekRound owner;
  CellRound cellRound;

  /**
   * constructor
   * Attention: le owner et le cellRound doivent appartenir au meme round
   **/
  constructor(LeekRound owner, CellRound cellRound) {
	this.owner = owner;
	this.cellRound = cellRound;
  }

  /**
   * simulateUse
   * TODO: TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
   **/
  Object simulateUse() {
    return {};
  }

  /**
   * string
   **/
  string string() {
    return shortString();
  }
  string shortString() {
    return this.class.name+": "+owner.leek.name+"+ move to "+cellRound.id;
  }
}

/******************************************************************************
 * ToolAction
 ******************************************************************************/
class ToolAction extends Action {

  ToolRound toolRound;
  CellRound targetCell;

  /**
   * constructor
   * Attention: le toolRound et le targetCell doivent appartenir au meme round
   **/
  constructor(ToolRound toolRound, CellRound targetCell) {
    this.id = id;
	this.toolRound = toolRound;
	this.targetCell = targetCell;
  }

  /**
   * simulateUse
   **/
  Object simulateUse() {
    return toolRound.simulateUseOnCell(targetCell);
  }
	
  /**
   * string
   **/
  string string() {
    return shortString();
  }
  string shortString() {
    return this.class.name+": "+toolRound.owner.leek.name+" use "+TOOL_NAME_TRANSLATOR[toolRound.id]!+" on "+targetCell.id;
  }

}
