include("round");

/******************************************************************************
 * Board
 * TODO : cas des summon
 ******************************************************************************/
class Board extends Objects {
  
  static integer myId;
  static integer maxAOERange;
  static Me me;           // Me
  static Round currentRound; // Round
  static Cell centerCell;   // Cell
  
  static Array<Enemy> enemies = [];  // Array(Enemy)
  static Array<Allie> allies  = [];  // Array(Allie)
  static Map<integer, Leek> leeks;           // Map(Leek)
  static Array<Cell> cells = [];    // Array(Cell) par consequent Map  
  static Array<Cell> deadEnds = []; // Array(Cell)
  
  /**
   * constructor
   **/
  static void init() {
    
    //
    // add me
    //
    me    = new Me();
    myId  = me.id;
    leeks = [myId:me];
    maxAOERange = me.maxAOERange;
    
    //
    // add enemies
    //
    Array<integer> ens = getEnemies();
    for(integer en in ens) {
      Enemy leek = new Enemy(en); 
      leeks[en] = leek;
      push(enemies, leek);
      if(leek.maxAOERange > maxAOERange) { 
        maxAOERange = leek.maxAOERange;
      }
    }
    
    //
    // add allies
    //
    ens = getAllies();
    for(integer en in ens) {
      if(en != myId) {
        leeks[en] = new Allie(en);
        push(allies, leeks[en]);
      }
    }
    
    //
    // cells creations
    //
    for(integer i = 0;i < NB_CELLS; i++) {
      push(cells, (getCellContent(i) == CELL_OBSTACLE)?new Wall(i):new FreeCell(i));
    }
    centerCell = cells[CENTER_CELL_ID];
    
    //
    // voisin creations
    //
    for(Cell objCell in cells) {
      for(string direction in STAR_DIRECTION) {
        Object xy = XY_DIRECTION[direction] as Object;
        integer|null cellId = getCellFromXY((objCell.x+xy.x) as integer,(objCell.y+xy.y) as integer);
        if(cellId) objCell[direction] = cells[cellId as integer];
      }
    }
    
    //
    // deadend
    //
    boolean deadEndLoop = true;
    while(deadEndLoop) {
      deadEndLoop = false;
      for(Cell objCell in cells) {
        if(objCell.isDeadEnd) continue;
        integer deadCount = 0;
        for(string direction in LINE_DIRECTION) {
          if((!objCell[direction]) || (objCell[direction] as Cell).isDeadEnd) deadCount++;
        }
        if(deadCount >= 3) {
          objCell.isDeadEnd = true;
          deadEndLoop = true;
          push(deadEnds, objCell);
        }
      }
    }
    
    //
    // define los, distance, diag and line
    //
    for(integer x = 1; x < NB_CELLS; x++) {
      Cell cellFrom = cells[x];
      if(cellFrom.isWall) continue;
      for(integer y = 0; y < x; y++) {
        Cell cellTo = cells[y];
        if(cellTo.isWall) continue;
        integer range = getCellDistance(x, y);
        if(range > MAX_RANGE) continue;
        cellFrom.interCellInfo[cellTo.id] = cellTo.interCellInfo[cellFrom.id] = 
          {range:range, isInsight:lineOfSight(x, y), isInline:(cellFrom.x == cellTo.x || cellFrom.y == cellTo.y), isDiag:(abs(cellFrom.x-cellTo.x) == abs(cellFrom.y-cellTo.y))};
      }
  }
  
    //
    // first round
    //
    currentRound = new Round();
  }
  
  /**
   * update
   **/
  static void update() {
  
    //
    // remove dead leek
    //
    for(integer id : Leek leek in leeks) {
      if(!isAlive(id)) {
        mapRemove(leeks,id);
        if(leek.isEnemy) removeElement(enemies,leek);
        else if(leek.isAllie) removeElement(allies,leek);
      }
    }
    currentRound = new Round();
  
  }
  
}

