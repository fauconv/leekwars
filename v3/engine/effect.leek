/******************************************************************************
 * Effect
 * [0:type, 1:min, 2:max, 3:turns, 4:targets, 5:modifiers]
 ******************************************************************************/
class Effect extends Objects {
  
  public string category;
  public integer type;     // Enumeration
  public integer minEffect;
  public integer maxEffect;
  public integer midEffect;
  public integer turns;
  public boolean targetAllie;
  public boolean targetCaster;
  public boolean targetSummon;
  public boolean targetNonSummon;
  public boolean targetEnemy;
  public boolean modIred;   // non utilise
  public boolean modMulti;
  public boolean modNoRep;
  public boolean modOnCast;
  public boolean modStack;
  public Function<Effect, LeekRound, LeekRound => EffectResult> simulateUseFunction; // function (Effect obj, LeekRound shooter, LeekRound target, real AOE, real midCriticalLuck) => EffectResult
  
  public Tool owner;

  //
  // temporary variables
  //
  public real tmpMidCriticalLuck;
  public real tmpMinEffect;
  public real tmpMaxEffect;
  public real tmpMidEffect;
  
  
  /**
   * constructor
   * @param effectArray : [0:type, 1:min, 2:max, 3:turns, 4:targets, 5:modifiers]
   **/
  constructor(Array<integer|real> effectArray, Tool owner) {
    this.owner = owner;
    type = effectArray[0] as integer;
    if(EFFECT_TYPE_TRANSLATOR_CATEGORY[type] == null) {
      debugC("Effect=>constructor=>type("+type+")inconnu sur tool("+owner.id+")",COLOR_RED);
      category = "categoryOther";
      setRegister("error_Effect_category_"+type, "Effect=>constructor=>type("+type+")inconnu sur tool("+owner.id+")");
      simulateUseFunction = EFFECT_TYPE_TRANSLATOR_CATEGORY[type]![2] as Function<Effect, LeekRound, LeekRound => EffectResult>;
    } else {
      category = EFFECT_TYPE_TRANSLATOR_CATEGORY[type]![1] as string;
      simulateUseFunction = effect_default;
    }
    minEffect = round(effectArray[1] as real);
    maxEffect = round(effectArray[2] as real);
    midEffect = round((minEffect+maxEffect)/2);
    turns = effectArray[3] as integer;
    integer targets = effectArray[4] as integer;
    targetAllie     = (targets & EFFECT_TARGET_ALLIES) > 0;
    targetCaster    = (targets & EFFECT_TARGET_CASTER) > 0;
    targetEnemy     = (targets & EFFECT_TARGET_ENEMIES) > 0;
    targetNonSummon = (targets & EFFECT_TARGET_NON_SUMMONS) > 0;
    targetSummon    = (targets & EFFECT_TARGET_SUMMONS) > 0;
    targets = effectArray[5] as integer;
    modIred   = (targets & EFFECT_MODIFIER_IRREDUCTIBLE) > 0;
    modMulti  = (targets & EFFECT_MODIFIER_MULTIPLIED_BY_TARGETS) > 0;
    modNoRep  = (targets & EFFECT_MODIFIER_NOT_REPLACEABLE) > 0;
    modOnCast = (targets & EFFECT_MODIFIER_ON_CASTER) > 0;
    modStack  = (targets & EFFECT_MODIFIER_STACKABLE) > 0;
  }
  
  /**
   * simulateUse
   * TODO: ajouter la puissance pour les battle royal
   * TODO: ajouter les passif des armes oubliees
   * TODO: test des damage return
   * le shooter et le target doivent etre du meme round
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  EffectResult simulateUse(LeekRound shooter, LeekRound target, real AOE, integer nbTargets, real midCriticalLuck, 
                            real criticalFactor) {
    
    Leek targetLeek = target.leek;
	Leek shooterLeek = shooter.leek;
    if((targetLeek.isAllie && shooterLeek.isAllie && !targetAllie) ||
	   (targetLeek.isEnemy && shooterLeek.isEnemy && !targetAllie) ||
       (targetLeek.isEnemy && shooterLeek.isAllie && !targetEnemy) ||
	   (targetLeek.isAllie && shooterLeek.isEnemy && !targetEnemy) ||
       (targetLeek.isSummon && !targetSummon) ||
       (!targetLeek.isSummon && !targetNonSummon) ||
       (modNoRep && mapContainsKey(target.effects, type)) ||
       (shooter.id == target.id && !targetCaster)) return new EffectResult();
    
    (modMulti) and (AOE *= nbTargets);
    
    GameDebug.add(EFFECT_DEBUG, EFFECT_TYPE_TRANSLATOR_CATEGORY[type]![0]+" on "+target.leek.name+"(AOE:"+AOE+")","simulate use effect");

    tmpMidCriticalLuck = midCriticalLuck;
    tmpMinEffect = minEffect*AOE;
    tmpMaxEffect = maxEffect*AOE*criticalFactor;
    tmpMidEffect = midEffect*(1.0+CRITICAL_BONUS*midCriticalLuck)*AOE;
    return simulateUseFunction(this, shooter, target);
  }

  /**
   * targetDmg
   * define damage to target
   * @return {real minEffect, real maxEffect, real midEffect}
   **/
  Object targetDmg(integer minCarac, integer maxCarac, integer midCarac) {
    return {
      minEffect: max(0.0, tmpMinEffect*(1.0+(minCarac/100.0))),
      maxEffect: max(0.0, tmpMaxEffect*(1.0+(maxCarac/100.0))),
      midEffect: max(0.0, tmpMidEffect*(1.0+(midCarac/100.0)))
    }
  }
    
  /**
   * dmgReturn
   * @param targetDmg : {real minEffect, real maxEffect, real midEffect}
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  EffectResult dmgReturn(LeekRound target, Object targetDmg) {
    return new EffectResult(round(targetDmg.minEffect * target.minDmgReturn / 100.0), 
                            round(targetDmg.maxEffect * target.maxDmgReturn / 100.0),
                            round(targetDmg.midEffect * target.midDmgReturn / 100.0));
  }

  /**
   * shield
   * @param targetDmg : {real minEffect, real maxEffect, real midEffect}
   **/
  void shield(LeekRound target, Object targetDmg) {
    targetDmg.minEffect = max(0.0, (targetDmg.minEffect as real*(1-(target.maxRelativeShield/100))-target.maxAbsoluteShield));
    targetDmg.maxEffect = max(0.0, (targetDmg.maxEffect as real*(1-(target.minRelativeShield/100))-target.minAbsoluteShield));
    targetDmg.midEffect = max(0.0, (targetDmg.midEffect as real*(1-(target.midRelativeShield/100))-target.midAbsoluteShield));
  }

  /**
   * RoundedDmg
   * @param targetDmg : {real minEffect, real maxEffect, real midEffect}
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  EffectResult roundedDmg(Object targetDmg) {
    return new EffectResult(round(targetDmg.minEffect as real),round(targetDmg.maxEffect as real), 
                            round(targetDmg.midEffect as real));
  }

  /**
   * applyDmg
   * apply damage to target
   * @param targetDmg : {real minEffect, real maxEffect, real midEffect}
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  EffectResult applyDmg(LeekRound target, Object targetDmg) {
    integer minDmg = round(targetDmg.minEffect as real);
    integer maxDmg = round(targetDmg.maxEffect as real);
    integer midDmg = round(targetDmg.midEffect as real);
    target.minInjury += minDmg; // injury target
    target.maxInjury += maxDmg;
    target.midInjury += midDmg;
    target.minLife -= maxDmg; // life target
    target.maxLife -= minDmg;
    target.midLife -= midDmg;
    return new EffectResult(minDmg, maxDmg, midDmg);
  }
  
  /**
   * applyHeal
   * apply damage to target
   * @param roundedDmg : {integer minEffect, integer maxEffect, integer midEffect}
   **/
  void applyHeal(LeekRound target, EffectResult roundedDmg) {
    roundedDmg.minEffect = min(roundedDmg.minEffect, target.minTotalLife-target.minLife);
    roundedDmg.maxEffect = min(roundedDmg.maxEffect, target.maxTotalLife-target.maxLife);
    roundedDmg.midEffect = min(roundedDmg.midEffect, target.midTotalLife-target.midLife);
    target.minInjury -= roundedDmg.maxEffect; // injury target
    target.maxInjury -= roundedDmg.minEffect;
    target.midInjury -= roundedDmg.midEffect;
    target.minLife += roundedDmg.minEffect; // life target
    target.maxLife += roundedDmg.maxEffect;
    target.midLife += roundedDmg.midEffect;
  }
  
  /**
   * erosion
   * erosion ne peut pas etre inferieur a la vie courante
   * @param roundedDmg : {integer minEffect, integer maxEffect, integer midEffect}
   **/
  void applyErosion(LeekRound target, real erosionFactor, EffectResult roundedDmg) {
    target.maxTotalLife = max(target.maxLife, target.maxTotalLife-round(erosionFactor * roundedDmg.minEffect));
    target.minTotalLife = max(target.minLife, target.minTotalLife-round((erosionFactor + CRITICAL_EROSION) *
                                                                        roundedDmg.maxEffect));
    target.midTotalLife = max(target.midLife, target.midTotalLife-round((erosionFactor + CRITICAL_EROSION *
                                                                         tmpMidCriticalLuck) * roundedDmg.maxEffect));
  }

  /** 
   * lifeSteal
   * @param roundedDmg : {integer minEffect, integer maxEffect, integer midEffect}
   * @param dmgReturn : {integer minEffect, integer maxEffect, integer midEffect}
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  EffectResult lifeSteal(LeekRound shooter, EffectResult roundedDmg, EffectResult dmgReturn) {
    return new EffectResult(
      max(dmgReturn.minEffect - round(roundedDmg.maxEffect * (shooter.maxWisdom / 1000)), 
          shooter.minLife - shooter.minTotalLife), // le vol de vie ne peut pas ramener plus de vie que la totallife
      max(dmgReturn.maxEffect - round(roundedDmg.minEffect * (shooter.minWisdom / 1000)), 
          shooter.maxLife - shooter.maxTotalLife),
      max(dmgReturn.midEffect - round(roundedDmg.midEffect * (shooter.midWisdom / 1000)), 
          shooter.midLife - shooter.midTotalLife)
    );
  }
  
  /**
   * applyLifeSteal
   * @param shooterDmg : {integer minEffect, integer maxEffect, integer midEffect}
   **/
  void applyLifeStealAndDmgReturn(LeekRound shooter, EffectResult shooterDmg) {
    shooter.minInjury += shooterDmg.minEffect; // injury shooter
    shooter.maxInjury += shooterDmg.maxEffect;
    shooter.midInjury += shooterDmg.midEffect;
    shooter.minLife -= shooterDmg.maxEffect; // life shooter
    shooter.maxLife -= shooterDmg.minEffect;
    shooter.midLife -= shooterDmg.midEffect;
  }
  
  /**
   * toString
   * @return string
   **/
  string string(string space = "") {
    return "Effect("+EFFECT_TYPE_TRANSLATOR_CATEGORY[type]![0] as string+") {cat: "+category+" min: "+minEffect+"\n  max: "+maxEffect+" mid:"+midEffect + "}\n";
  }
  string shortString(string space = "") {
    return "Effect("+EFFECT_TYPE_TRANSLATOR_CATEGORY[type]![0] as string + ")";
  }
  
} // class

