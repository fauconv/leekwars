/******************************************************************************
 * LeekRound
 ******************************************************************************/
class LeekRound extends Objects {

  static string STATE_APPROACH = "Approaching";
  static string STATE_UNKNOWN  = "Unknown";
  static string STATE_ESCAPE   = "Escaping";
	
  Leek leek;
  CellRound currentCell;
  integer currentCellId;
  
  integer minTP;
  integer maxTP;
  integer midTP;
  integer maxTotalLife;
  integer minTotalLife;
  integer midTotalLife;
  integer maxLife;
  integer midLife;
  integer minLife;
  integer minResistance;
  integer maxResistance;
  integer midResistance;
  integer minAgility;
  integer maxAgility;
  integer midAgility;
  integer minStrength;
  integer maxStrength;
  integer midStrength;
  integer minMagic;
  integer maxMagic;
  integer midMagic;
  integer minScience;
  integer maxScience;
  integer midScience;
  integer minWisdom;
  integer maxWisdom;
  integer midWisdom;
  integer minAbsoluteShield;
  integer maxAbsoluteShield;
  integer midAbsoluteShield;
  integer minRelativeShield;
  integer maxRelativeShield;
  integer midRelativeShield;
  integer minDmgReturn;
  integer maxDmgReturn;
  integer midDmgReturn;
  integer minMP;
  integer maxMP;
  integer midMP;
  integer minPower;
  integer maxPower;
  integer midPower;

  integer maxInjury;
  integer midInjury;
  integer minInjury;
  
  integer maxAOERange;
  ToolRound|null weapon;
  integer|null weaponId;
  
  Map<integer,Array<Array<integer|boolean>>> effects = [:];
  
  Map<integer, ToolRound> toolsRound = [:];
  Array<WeaponRound> weaponsRound = [];
  Array<ChipRound|null> chipsRound = [];
  Round roundObj;
    
  Array<ToolRound> categoryDamage = [];
  Array<ToolRound> categoryProtection = [];
  Array<ToolRound> categoryHeal = [];
  Array<ToolRound> categoryMPBuff = [];
  Array<ToolRound> categoryBuff = [];
  Array<ToolRound> categoryDeBuff = [];
  Array<ToolRound> categoryBulb = []; 
  Array<ToolRound> categoryOther = [];
  Array<ToolRound> categoryMove = [];
  
  /**
   * constructor
   **/
  constructor(Leek|LeekRound leek, Round roundObj) {
  
	id = leek.id;
    this.roundObj = roundObj;
	
    if(leek.class.super.name == "LeekRound") {
	  
	  //
      // clonage
      //
      this.leek = (leek as LeekRound).leek;
      
      minTP = (leek as LeekRound).minTP
      maxTP = (leek as LeekRound).maxTP
      midTP = (leek as LeekRound).midTP;
      maxTotalLife = (leek as LeekRound).maxTotalLife
      minTotalLife = (leek as LeekRound).minTotalLife
      midTotalLife = (leek as LeekRound).midTotalLife
      maxLife = (leek as LeekRound).maxLife
      midLife = (leek as LeekRound).midLife
      minLife = (leek as LeekRound).minLife
      minResistance = (leek as LeekRound).minResistance
      maxResistance = (leek as LeekRound).maxResistance
      midResistance = (leek as LeekRound).midResistance
      minAgility = (leek as LeekRound).minAgility
      maxAgility = (leek as LeekRound).maxAgility
      midAgility = (leek as LeekRound).midAgility
      minStrength = (leek as LeekRound).minStrength
      maxStrength = (leek as LeekRound).maxStrength
      midStrength = (leek as LeekRound).midStrength
      minMagic = (leek as LeekRound).minMagic
      maxMagic = (leek as LeekRound).maxMagic
      midMagic = (leek as LeekRound).midMagic
      minScience = (leek as LeekRound).minScience
      maxScience = (leek as LeekRound).maxScience
      midScience = (leek as LeekRound).midScience
      minWisdom = (leek as LeekRound).minWisdom
      maxWisdom = (leek as LeekRound).maxWisdom
      midWisdom = (leek as LeekRound).midWisdom
      minAbsoluteShield = (leek as LeekRound).minAbsoluteShield
      maxAbsoluteShield = (leek as LeekRound).maxAbsoluteShield
      midAbsoluteShield = (leek as LeekRound).midAbsoluteShield
      minRelativeShield = (leek as LeekRound).minRelativeShield
      maxRelativeShield = (leek as LeekRound).maxRelativeShield
      midRelativeShield = (leek as LeekRound).midRelativeShield
      minDmgReturn = (leek as LeekRound).minDmgReturn
      maxDmgReturn = (leek as LeekRound).maxDmgReturn
      midDmgReturn = (leek as LeekRound).midDmgReturn
      minMP = (leek as LeekRound).minMP
      maxMP = (leek as LeekRound).maxMP
      midMP = (leek as LeekRound).midMP
      minPower = (leek as LeekRound).minPower
      maxPower = (leek as LeekRound).maxPower
      midPower = (leek as LeekRound).midPower
      maxInjury = (leek as LeekRound).maxInjury
      midInjury = (leek as LeekRound).midInjury
      minInjury = (leek as LeekRound).minInjury
      
      maxAOERange = leek.maxAOERange
      weaponId = (leek as LeekRound).weaponId
      
      currentCellId = (leek as LeekRound).currentCellId
      CellRound cellRound = roundObj.cellsRound[currentCellId];
      cellRound.leekOnCell = this;
      
      currentCell = roundObj.cellsRound[currentCellId];
      
      effects = clone((leek as LeekRound).effects,3) as Map<integer,Array<Array<integer|boolean>>>
      
      for(ToolRound toolRound in (leek as LeekRound).toolsRound) {
        if(toolRound.tool.isChip) {
          categoriseTool(new ChipRound(toolRound, this)); 
        } else {
          categoriseTool(new WeaponRound(toolRound, this));
        }
      }
	  if(weaponId) weapon = toolsRound[weaponId!];
		
	} else {
	  
	  //
	  // cas normal
	  //
      this.leek = leek as Leek;

      minTP = maxTP = midTP = getTP(id)!;
      maxTotalLife = minTotalLife = midTotalLife = getTotalLife(id)!;
      maxLife = midLife = minLife = getLife(id)!;
      minResistance = maxResistance = midResistance = getResistance(id)!;
      minAgility = maxAgility = midAgility = getAgility(id)!;
      minStrength = maxStrength = midStrength = getStrength(id)!;
      minMagic = maxMagic = midMagic = getMagic(id)!;
      minScience = maxScience = midScience = getScience(id)!;
      minWisdom = maxWisdom = midWisdom = getWisdom(id)!;
      minAbsoluteShield = maxAbsoluteShield = midAbsoluteShield = getAbsoluteShield(id)!;
      minRelativeShield = maxRelativeShield = midRelativeShield = getRelativeShield(id)!;
      minDmgReturn = maxDmgReturn = midDmgReturn = getDamageReturn(id)!;
      minMP = maxMP = midMP = getMP(id)!;
      minPower = maxPower = midPower = getPower(id)!;

      maxInjury = midInjury = minInjury = 0;

      currentCellId = getCell(id)!;
      currentCell = roundObj.cellsRound[currentCellId];
      currentCell.leekOnCell = this;

      for(Tool tool in (leek as Leek).tools) {
        if(tool.isChip) {
          if(getCooldown(tool.id) == 0) {
            ChipRound c = new ChipRound(tool, this);
            categoriseTool(c);
            push(chipsRound, c);
          }
        } else {
          WeaponRound w = new WeaponRound(tool, this);
          categoriseTool(w);
          push(weaponsRound, w);
        }
      }

      if(weaponId = getWeapon(id)) weapon = toolsRound[weaponId!];

      Array<Array<integer | boolean>> effects = getEffects(id)!;
      for(Array<integer | boolean> effect in effects) {
        if (mapContainsKey(this.effects,effect[0])) {
          push(this.effects[effect[0] as integer]!, effect);
        } else {
          this.effects[effect[0] as integer] = [effect];
        }
      }
	}
    
  }

  /**
   * update
   * @param full : voir Round
   **/
  update(boolean full = true) {
	  
	if(full) {
      minTP = maxTP = midTP = getTP(id)!;
      maxTotalLife = minTotalLife = midTotalLife = getTotalLife(id)!;
      maxLife = midLife = minLife = getLife(id)!;
      minResistance = maxResistance = midResistance = getResistance(id)!;
      minAgility = maxAgility = midAgility = getAgility(id)!;
      minStrength = maxStrength = midStrength = getStrength(id)!;
      minMagic = maxMagic = midMagic = getMagic(id)!;
      minScience = maxScience = midScience = getScience(id)!;
      minWisdom = maxWisdom = midWisdom = getWisdom(id)!;
      minAbsoluteShield = maxAbsoluteShield = midAbsoluteShield = getAbsoluteShield(id)!;
      minRelativeShield = maxRelativeShield = midRelativeShield = getRelativeShield(id)!;
      minDmgReturn = maxDmgReturn = midDmgReturn = getDamageReturn(id)!;
      minMP = maxMP = midMP = getMP(id)!;
      minPower = maxPower = midPower = getPower(id)!;

      maxInjury = midInjury = minInjury = 0;
	  
	  Array<Array<integer | boolean>> effects = getEffects(id)!;
	  this.effects = [:];
      for(Array<integer | boolean> effect in effects) {
        if (mapContainsKey(this.effects,effect[0])) {
          push(this.effects[effect[0] as integer]!, effect);
        } else {
          this.effects[effect[0] as integer] = [effect];
        }
      }
	}
		
	Array<ChipRound|null> tmp = chipsRound;
	for(integer index : ChipRound|null chipRound in tmp) {
	  if(chipRound != null && getCooldown(chipRound!.id) == 0) {
        chipsRound[index] = null;
		mapRemove(toolsRound, chipRound!.id);
	  }
	}

  }
	
   /**
   * categoriseTool
   **/
  categoriseTool(ToolRound toolRound) {
    toolsRound[toolRound.id] = toolRound;
    Tool tool = toolRound.tool;
    for(string category in tool.categories) push(this[category] as Array<ToolRound>, toolRound);
    (tool.categories["categoryDamage"]) and
      (tool.maxAOERange > maxAOERange) and (maxAOERange = tool.maxAOERange);
  }
  
  /**
   * simulateSetWeapon
   **/
  void simulateSetWeapon(integer weaponId) {
    minTP--;
    maxTP--;
    midTP--;
	if(minTP < 0) debugC("LeekRound=>simulateSetWeapon=>ERREUR !!!!",COLOR_RED);
    this.weaponId = weaponId;
    this.weapon = toolsRound[weaponId];
  }

  /**
   * simulateMoveToCell
   * s approche de cellId, on ne verifie pas qu on a assez de MP
   * @return new currentCellId
   **/
  integer simulateMoveToCell(integer cellId, integer usingMP) {
	minMP -= usingMP;
	maxMP -= usingMP;
	midMP -= usingMP;
	if(minMP < 0) debugC("LeekRound=>simulateMoveToCell=>ERREUR !!!!",COLOR_RED);
	currentCell.leekOnCell = null;
	currentCellId = cellId;
	currentCell = roundObj.cellsRound[cellId];
	currentCell.leekOnCell = this;
	return currentCellId;
  }
  
  /**
   * parcour
   * parcour tous les chemins possible en partant de startCell avec remainingMP sans se regarder lui meme.
   * @return Array[cellId] = remainingMP
   **/
  Map<integer,integer> parcour(Cell startCell, integer remainingMP) {
	Cell voisin;
	Array<CellRound> referenceBoard = roundObj.cellsRound;
    Map<integer,Array<Cell>> reachableCells = [remainingMP:[startCell]] //reachableCells[remainingMP][] = cell
    Map<integer,integer> flatReachableCells = [startCell.id:remainingMP];
    for(integer i = remainingMP; i > 0; i--) {
      integer futurMP = i-1
      reachableCells[futurMP] = [];
      for(Cell cell in reachableCells[i]!) {
        for(string direction in LINE_DIRECTION) {
          if(!(voisin = cell[direction] as Cell) || voisin.isWall) continue
          integer voisinId = voisin.id;
          LeekRound|null leekvoisin = referenceBoard[voisinId].leekOnCell;
          if(!mapContainsKey(flatReachableCells, voisinId) && (!leekvoisin || leekvoisin!.id == id)) { // dans le cas d un deuxieme appel a parcour il se peut qu on retombe sur la position initial du poireau concerne
            push(reachableCells[futurMP]!, voisin);
            flatReachableCells[voisinId] = futurMP;
		  }
        }
      }
    }
    return flatReachableCells
  }
  
}

/******************************************************************************
 * AllieRound
 ******************************************************************************/
class AllieRound extends LeekRound {
  
  /**
   * constructor
   **/
  constructor(Leek|AllieRound leek, Round roundObj) {
    super(leek, roundObj);
  }
  
}

/******************************************************************************
 * EnemyRound
 ******************************************************************************/
class EnemyRound extends LeekRound {

  string state = LeekRound.STATE_UNKNOWN;
	
  /**
   * constructor
   **/
  constructor(EnemyRound|Leek leek, Round roundObj) {
    super(leek, roundObj);
  }
 
  /**
   * updateState
   **/
  void updateState(EnemyRound previousEnemyRound, Array<InterCellInfo> myInter) {
	  integer d1 = myInter[currentCellId].range;
	  integer d2 = myInter[previousEnemyRound.currentCellId].range;
	  if(d1 > d2) {
	    state = LeekRound.STATE_ESCAPE;
	  } else if(d1 < d2) {
		state = LeekRound.STATE_APPROACH;
	  } else {
		state = LeekRound.STATE_UNKNOWN;
	  }
  }
}

/******************************************************************************
 * MeRound
 ******************************************************************************/
class MeRound extends LeekRound {
  
  integer relativeCenterCellId = -1;
  Array<integer>|null pathToCenter;
  
  /**
   * constructor
   **/
  constructor(Round roundObj, MeRound|null clone = null) {
    if(clone != null) {
      super(clone!, roundObj);
    } else {
      super(Board.me, roundObj);
    }
  }
  
  /**
   * getHistoricalRelativeCenter
   *
   * @return cellId
   **/
  integer getHistoricalRelativeCenter() {
    if((leek as Me).historicalRelativeCenterCellId == -1) return getRelativeCenter();
    return (leek as Me).historicalRelativeCenterCellId;
  }
  
  /**
   * getRelativeCenter
   *
   * @return cellId
   **/
  integer getRelativeCenter() {
    if(relativeCenterCellId > -1) return relativeCenterCellId;
    (!Board.centerCell.isDeadEnd) and (pathToCenter = getPath(currentCellId, CENTER_CELL_ID));
    if (pathToCenter) {
      relativeCenterCellId    = CENTER_CELL_ID;
	  (leek as Me).historicalRelativeCenterCellId = relativeCenterCellId;
	  return relativeCenterCellId;
    }
    Array<integer> trajectoryToCenter = currentCell.cell.getTrajectory(Board.centerCell)
    boolean ok = false;
    Cell finalCell;
    while(!isEmpty(trajectoryToCenter)) {
      finalCell = Board.cells[pop(trajectoryToCenter) as integer];
      if(!finalCell.isDeadEnd) {
        if (pathToCenter = getPath(currentCellId, finalCell.id)) {
          ok = true;
          break;
        }
      }
    }
    if(ok) {
      relativeCenterCellId    = finalCell.id;
      (leek as Me).historicalRelativeCenterCellId = relativeCenterCellId;
    } // else relativeCenterCell = null
    return relativeCenterCellId;
  }

  /**
   * setWeaponRound
   **/
  boolean setWeaponRound(integer weaponId) {
    if(setWeapon(weaponId)) {
      minTP = maxTP = midTP = getTP(id)!;
      this.weaponId = weaponId;
      this.weapon = this.toolsRound[weaponId];
      return true;
    }
    return false;
  }

  /**
   * moveToCell
   * s approche de cellId
   * @return new currentCellId
   **/
  integer moveToCell(integer cellId) {
	GameDebug.add(LEEKROUND_DEBUG,cellId,"je veux aller a");
    if(moveTowardCell(cellId)) {
	  minMP = maxMP = midMP = getMP(id)!;
	  currentCell.leekOnCell = null;
	  currentCellId = getCell(id)!;
	  currentCell = roundObj.cellsRound[currentCellId];
	  currentCell.leekOnCell = this;
	  return currentCellId;
	}
	return currentCellId;
  }

}
