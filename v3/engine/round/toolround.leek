/******************************************************************************
 * ToolRound
 *
 * Exist only if cooldown == 0
 ******************************************************************************/
class ToolRound extends Objects {
  
  Tool tool;
  integer cooldown; 
  Round roundObj;
  LeekRound owner;
  
  /**
   * constructor
   **/
  constructor(Tool|ToolRound tool, LeekRound owner) {
	this.owner = owner;
	roundObj = owner.roundObj;
    id = tool.id;
    if(tool.class.super.name == "Tool") {
      this.tool = tool as Tool;
      cooldown = 0;
    } else {
      this.tool = (tool as ToolRound).tool;
      cooldown = tool.cooldown;
    }
  }
  
  /**
   * simulateUseOnCell
   * TODO: TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
   * Pour le moment ne fonctionne qu en tire direct sur un target
   * calcul de l AOE via parcour pour determiner la liste des target atteinte 
   * on peut peut etre utiliser getWeaponTargets et getChipTarget et calculer l AOE de chaque target apres ?
   * Attention: le cellRound doit etre du meme round que le toolround
   **/
  Object simulateUseOnCell(integer cellId) {
	debug("ToolRound=>simulateUseOnCell=> TODOOOOOOOOOOOOOOOOOOOOOO");
	if(roundObj.cellsRound[cellId].leekOnCell != null) return simulateUse([roundObj.cellsRound[cellId].leekOnCell!.id]);
	else return {minEffect:0,maxEffect:0,midEffect:0};
  }

  /**
   * simulateUse
   * Attention: le round des targets doit etre le meme que le round du tool
   * @return {integer minEffect, integer maxEffect, integer midEffect}
   **/
  Object simulateUse(Array<Integer> targets = [this.owner.id], Array<real> AOEs = [1.0]) {
    integer cost = tool.cost;
    owner.minTP -= cost;
    owner.maxTP -= cost;
    owner.midTP -= cost;
    cooldown = tool.cooldown;
    Object delta = {minEffect:0,maxEffect:0,midEffect:0};
    real midCriticalLuck = owner.midAgility/1000.0;
	real criticalFactor = CRITICAL_FACTOR;
	(owner.maxAgility <= 0) and (criticalFactor = 1.0);
    for(Effect effect in tool.effects) {
      if(effect.modOnCast) {
		GameDebug.add(EFFECT_DEBUG,"apply on caster only:");
        Object delta2 = effect.simulateUse(owner, owner, 1.0, 1, midCriticalLuck, criticalFactor)
		GameDebug.add(EFFECT_DEBUG, delta2,"effect dmg");
        delta.minEffect += delta2.minEffect;
        delta.maxEffect += delta2.maxEffect;
        delta.midEffect += delta2.midEffect;
      } else {
		integer nbTargets = count(targets);
        for(integer i : integer targetId in targets) {
		  LeekRound target = roundObj.leeksRound[targetId]!;
          Object delta2 = effect.simulateUse(owner, target, AOEs[i], nbTargets, midCriticalLuck, criticalFactor)
		  GameDebug.add(EFFECT_DEBUG, delta2,"effect dmg");
          delta.minEffect += delta2.minEffect;
          delta.maxEffect += delta2.maxEffect;
          delta.midEffect += delta2.midEffect;
        }
      }
    }
    return delta;
  }
  
  /**
   * toString
   *
   * @return string
   **/
  string shortString() {
    return this.class.name+"("+TOOL_NAME_TRANSLATOR[id]+")";
  }
  
}

/******************************************************************************
 * WeaponRound
 *
 * Exist only if cooldown == 0
 ******************************************************************************/
class WeaponRound extends ToolRound {
  
  /**
   * constructor
   **/
  constructor(Tool|ToolRound tool, LeekRound owner) {
    super(tool, owner);
  }
  
}

/******************************************************************************
 * ChipRound
 *
 * Exist only if cooldown == 0
 ******************************************************************************/
class ChipRound extends ToolRound {
  
  /**
   * constructor
   **/
  constructor(Tool|ToolRound tool, LeekRound owner) {
    super(tool, owner);
  }
  
}
