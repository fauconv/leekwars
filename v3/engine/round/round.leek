include("toolround");
include("leekround");
include("cellround");

/******************************************************************************
 * Round
 ******************************************************************************/
class Round extends Objects {
  
  MeRound meRound;
  
  Array<CellRound> cellsRound = [];
  
  Array<AllieRound> alliesRound = [];
  Array<EnemyRound> enemiesRound = [];
  
  Map<integer, LeekRound> leeksRound = [:];
  
  /**
   * constructor
   **/
  constructor() {
      
    //
    // cells creations
    //
    for(integer i = 0;i < NB_CELLS; i++) {
      push(cellsRound, new CellRound(Board.cells[i],this));
    }
     
    id = getTurn();
     
    //
    // add me
    //
    meRound = new MeRound(this);
    leeksRound[meRound.id] = meRound;

    //
    // add enemies
    //
    for(Leek enemy in Board.enemies) {
      EnemyRound en = new EnemyRound(enemy, this);
      push(enemiesRound, en);
      leeksRound[en.id] = en;
    }

    //
    // add allies
    //
    for(Leek enemy in Board.allies) {
      AllieRound en = new AllieRound(enemy, this);
      push(alliesRound, en);
      leeksRound[en.id] = en;
    }
    
  }
  /**
   * constructor
   * @param clone : le round a cloner
   **/
  constructor(Round clone) {
      
    //
    // cells creations
    //
    for(integer i = 0;i < NB_CELLS; i++) {
      push(cellsRound, new CellRound(Board.cells[i],this));
    }
    
    id = clone.id;
      
    //
    // add me
    //
    meRound = new MeRound(this, clone.meRound);
    leeksRound[meRound.id] = meRound;

    //
    // add enemies
    //
    for(EnemyRound enemy in clone.enemiesRound) {
      EnemyRound en = new EnemyRound(enemy, this); 
      push(enemiesRound, en);
      leeksRound[en.id] = en;
    }

    //
    // add allies
    //
    for(AllieRound enemy in clone.alliesRound) {
      AllieRound en = new AllieRound(enemy, this);
      push(alliesRound, en);
      leeksRound[en.id] = en;
    }
     
  }
  
  /**
   * update
   * mets a jour le round par rapport au simulation (de deplacement ou de tire)
   * - met a jour leekOnCell
   * - met a jour la liste des leek vivant
   * - met a jour la liste des arme dispo de chaque leek
   * - met a jour les valeurs caracteristique des leek
   * @param full : si false ne met pas  a jour la liste des caracteristique des leek
   *               - true s utilise pour mettre a jour le round courant a mesure que l on fait des actions
   *               - false s utilise quand on simule des actions car les caracteristiques des poireau son calcule par simulation
   **/
  update(boolean full = true) {
    for(integer id : LeekRound leek in leeksRound) {
      if(!isAlive(id)) {
        mapRemove(leeksRound,id);
        if(leek.leek.isEnemy) removeElement(enemiesRound,leek);
        else if(leek.leek.isAllie) removeElement(alliesRound,leek);
      } else {
        leek.update(full);
      }  
    }
  }

  /**
   * updateState
   **/
  updateState(Round previousRound) {
    Array<InterCellInfo> myInter = meRound.currentCell.cell.interCellInfo;
    for(EnemyRound enemy in enemiesRound) enemy.updateState(previousRound.leeksRound[enemy.id] as EnemyRound, myInter);
  }
}
