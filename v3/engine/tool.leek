/******************************************************************************
 * Tool
 ******************************************************************************/
class Tool extends Objects {
  
  boolean needLos;
  integer areaType; // Enumeration
  integer cost;
  integer launchType;    // Enumeration
  integer minRange;
  integer maxRange;
  integer minAOERange;
  integer maxAOERange;
  integer AOERange;
  integer AOELaunchType; // Enumeration
  integer cooldown;
  // TODO: ajout d une nombre d utilisation par tour
  boolean isChip;
  boolean isAOE;
  boolean isLaser;
  boolean targetAllie     = false;
  boolean targetSummon    = false;
  boolean targetNonSummon = false;
  boolean targetEnemy     = false;
  boolean targetCaster    = false;
  
  Leek owner;
  
  Array<Effect> effects = [];
  Map<string,string> categories = [:];
  
  /**
   * constructor
   **/
  constructor(integer id, Leek owner, Array<Array<integer|real>>effects) {
    this.id = id;
    this.owner = owner;
    
    Effect eff;
    for(Array<real|integer> effect in effects) {
      eff = new Effect(effect, this);
      push(this.effects, eff);
      categories[eff.category] = eff.category;
      targetAllie     = targetAllie     || eff.targetAllie;
      targetCaster    = targetCaster    || eff.targetCaster;
      targetEnemy     = targetEnemy     || eff.targetEnemy;
      targetSummon    = targetSummon    || eff.targetSummon;
      targetNonSummon = targetNonSummon || eff.targetNonSummon;
    }
    
    if(areaType == AREA_POINT || areaType == AREA_LASER_LINE || areaType == AREA_ALLIES || areaType == AREA_ENEMIES) {
      isAOE = false;
      maxAOERange = maxRange;
      minAOERange = minRange;
      if(areaType == AREA_LASER_LINE) {
        isLaser = true;
        AOELaunchType = LAUNCH_TYPE_LINE;
      }
    } else {
      isAOE = true;
      if(areaType == AREA_X_3) {
        AOERange = 6;
        AOELaunchType = LAUNCH_TYPE_DIAGONAL;
      } else if(areaType == AREA_X_2) {
        AOERange = 4;
        AOELaunchType = LAUNCH_TYPE_DIAGONAL;
      } else if(areaType == AREA_SQUARE_2) {
        AOERange = 4;
        AOELaunchType = LAUNCH_TYPE_SQUARE;
      } else if(areaType == AREA_CIRCLE_3) {
        AOERange = 3;
        AOELaunchType = LAUNCH_TYPE_CIRCLE;
      } else if(areaType == AREA_CIRCLE_2) {
        AOERange = 2;
        AOELaunchType = LAUNCH_TYPE_CIRCLE;
      } else if(areaType == AREA_PLUS_2) {
        AOERange = 2;
        AOELaunchType = LAUNCH_TYPE_LINE;
      } else if(areaType == AREA_X_1) {
        AOERange = 2;
        AOELaunchType = LAUNCH_TYPE_DIAGONAL;
      } else if(areaType == AREA_SQUARE_1) {
        AOERange = 2;
        AOELaunchType = LAUNCH_TYPE_SQUARE;
      } else if(areaType == AREA_PLUS_3) {
        AOERange = 3;
        AOELaunchType = LAUNCH_TYPE_LINE;
      } else { // AREA_CIRCLE_1 || AREA_PLUS_1 || AREA_FIRST_INLINE || 
        AOERange = 1;
        AOELaunchType = LAUNCH_TYPE_LINE;
      }
      maxAOERange = maxRange+AOERange;
      minAOERange = max(minRange-AOERange,1);
    }
    
  }
  
  /**
   * canUseTool
   **/
  boolean canUseTool(integer range, boolean isInsight, boolean isInLine, boolean isDiag) {
    return (range <= maxRange && range >= minRange && (!needLos || isInsight) && 
            (launchType != LAUNCH_TYPE_LINE || isInLine) && (launchType != LAUNCH_TYPE_DIAGONAL || isDiag) && 
            (launchType != LAUNCH_TYPE_STAR || isDiag || isInLine) && 
            (launchType != LAUNCH_TYPE_STAR_INVERTED || isDiag && isInLine));
  }
    
  /**
   * toString
   *
   * @return string
   **/
  string string(string space = "") {
    return this.class.name+"("+TOOL_NAME_TRANSLATOR[id]+"):\n"+
		                       space+"  areaType:"+areaType+"\n"+
		                       space+"  needLos:"+needLos+"\n"+
		                       space+"  cost:"+cost+"\n"+
		                       space+"  launchType:"+TOOL_LAUNCHTYPE_TRANSLATOR[launchType]+"\n"+
		                       space+"  minRange:"+minRange+"\n"+
		                       space+"  maxRange:"+maxRange+"\n"+
		                       space+"  cooldown:"+cooldown;
  }
  string shortString(string space = "") {
    return this.class.name+"("+TOOL_NAME_TRANSLATOR[id]!+")("+maxRange+")";
  }
  
}

/******************************************************************************
 * Weapon
 ******************************************************************************/
class Weapon extends Tool {
    
  /**
   * constructor
   **/
  constructor(integer weaponId, Leek owner) {
    isChip     = false;
    areaType   = getWeaponArea(weaponId)!;
    needLos    = weaponNeedLos(weaponId);
    cost       = getWeaponCost(weaponId);
    launchType = getWeaponLaunchType(weaponId)!;
    minRange   = getWeaponMinRange(weaponId);
    maxRange   = getWeaponMaxRange(weaponId);
    cooldown   = 0;

    super(weaponId, owner, getWeaponEffects(weaponId)!);
  }

  /**
   * getToolEffectiveArea
   **/
  Array<integer>|null getToolEffectiveArea(integer cellToId, integer | null cellFromId = null) {
    return getWeaponEffectiveArea(id, cellToId, cellFromId);
  }
  
}

/******************************************************************************
 * Chip
 ******************************************************************************/
class Chip extends Tool {
  
  /**
   * constructor
   **/
  constructor(integer chipId, Leek owner) {
    isChip   = true;
    areaType = getChipArea(chipId)!;
    needLos  = chipNeedLos(chipId);
    cost     = getChipCost(chipId)!;
    launchType = getChipLaunchType(chipId)!;
    minRange = getChipMinRange(chipId)!;
    maxRange = getChipMaxRange(chipId)!;
    cooldown = getChipCooldown(chipId);
    
    super(chipId, owner, getChipEffects(chipId)!);
  }

  /**
   * getToolEffectiveArea
   **/
  Array<integer>|null getToolEffectiveArea(integer cellToId, integer | null cellFromId = null) {
    return getChipEffectiveArea(id, cellToId, cellFromId);
  }
  
}

