/******************************************************************************
 * Board
 * TODO : cas des summon
 ******************************************************************************/
class Board extends Objects {
  
  static integer myId;
  static integer maxAOERange;
  static Me me;       
  static Round currentRound;
  static Round previousRound;
  static Cell centerCell;
  
  static Array<Enemy> enemies = []; 
  static Array<Allie> allies  = [];
  static Map<integer, Leek> leeks;    
  static Array<Cell> cells = [];    // Array(Cell) par consequent Map  
  static Array<Cell> deadEnds = []; 
  
  /**
   * constructor
   **/
  static boolean init() {
    
	if(gFirstRound) {
	
      //
      // add me
      //
      me    = new Me();
      myId  = me.id;
      leeks = [myId:me];
      maxAOERange = me.maxAOERange;
    
      //
      // add enemies
      //
      Array<integer> ens = getEnemies();
      for(integer en in ens) {
        Enemy leek = new Enemy(en); 
        leeks[en] = leek;
        push(enemies, leek);
        if(leek.maxAOERange > maxAOERange) { 
          maxAOERange = leek.maxAOERange;
        }
      }
    
      //
      // add allies
      //
      ens = getAllies();
      for(integer en in ens) {
        if(en != myId) {
          leeks[en] = new Allie(en);
          push(allies, leeks[en]);
        }
      }
    
      //
      // cells creations
      //
	  InterCellInfo interCellNull = new InterCellInfo(maxAOERange);
      for(integer i = 0;i < NB_CELLS; i++) {
        push(cells, (getCellContent(i) == CELL_OBSTACLE)?new Wall(i, interCellNull):new FreeCell(i, interCellNull));
      }
      centerCell = cells[CENTER_CELL_ID];
    
      //
      // voisin creations
      //
      for(Cell objCell in cells) {
        for(string direction in STAR_DIRECTION) {
          Object xy = XY_DIRECTION[direction] as Object;
          integer|null cellId = getCellFromXY((objCell.x+xy.x) as integer,(objCell.y+xy.y) as integer);
          (cellId) and (objCell[direction] = cells[cellId as integer]);
        }
      }
    
      //
      // deadend
      //
      boolean deadEndLoop = true;
      while(deadEndLoop) {
        deadEndLoop = false;
        for(Cell objCell in cells) {
          if(objCell.isDeadEnd) continue;
          integer deadCount = 0;
          for(string direction in LINE_DIRECTION) {
            ((!objCell[direction]) || (objCell[direction] as Cell).isDeadEnd) and (deadCount++);
          }
          if(deadCount >= 3) {
            objCell.isDeadEnd = true;
            deadEndLoop = true;
            push(deadEnds, objCell);
          }
        }
      }
	} // First Round
	
	//
	// interCell computation
	//
    for(integer x = 0; x < NB_CELLS; x++) {
      Cell cellFrom = cells[x];
      if(cellFrom.isWall) continue;
      for(integer y = 0; y < x; y++) {
        Cell cellTo = cells[y];
        if(cellTo.isWall) continue;
        integer range = getCellDistance(x, y);
        cellFrom.interCellInfo[cellTo.id] = cellTo.interCellInfo[cellFrom.id] = new InterCellInfo(cellFrom, cellTo, range);
      }
    }
  
    //
    // first round
    //
    previousRound = currentRound = new Round();
	
	return true;
  }
	
  /**
   * update
   **/
  static void update() {
  
    //
    // remove dead leek
    //
    for(integer id : Leek leek in leeks) {
      if(!isAlive(id)) {
        mapRemove(leeks,id);
        if(leek.isEnemy) removeElement(enemies,leek);
        else (leek.isAllie) and (removeElement(allies,leek));
      }
    }
	previousRound = currentRound;
    currentRound = new Round();
  
  }
  
}

