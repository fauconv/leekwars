/****************************************************************************
 * Unit test
 ****************************************************************************/
class UnitTest extends Strategy {
  
  static MeRound meRound;       // MeRound
  static EnemyRound enemyRound;    // EnemyRound
  static Round currentRound;  // Round
  static Round oldRound;
  
  /**
   * isValide
   **/
  static boolean isValide() {
    return UNIT_TEST_DEBUG && (getFightContext() == FIGHT_CONTEXT_TEST);
  }
  
  /**
   * apply
   **/
  boolean apply() {
    
    currentRound = Board.currentRound;
    meRound = currentRound.meRound;
    enemyRound = currentRound.enemiesRound[0];
    GameDebug.addOperation(true, "round init");
    
    if(gFirstRound) {
      Talk.text = "UnitTest mode";
      if(meRound.weaponsRound[0]) meRound.setWeaponRound(meRound.weaponsRound[0].id);
      else debugC("no weapon", COLOR_RED);
      board();
      cell();
      cellRound();
      chain();
      effect();
      functions();
      leek();
      leekRound();
      tool();
	  oldRound = currentRound;
	  meRound.moveToCell(meRound.getRelativeCenter());
      return true;
    }
	roundTest();
	toolRound();
    oldRound = currentRound;
	return true;
  }
  
  /**
   * board
   **/
  boolean board() {
    debug("Board.maxAOERange:"+Board.maxAOERange);
    debug("Legend: deadend = brown");
    GameDebug.addBackground(true, Board.deadEnds,COLOR_BROWN); // marron
    if(Board.cells[306].right.id == 324 && Board.cells[10].rightTop.id == 11) debugC("Board OK",COLOR_GREEN);
    else debugC("Board KO", COLOR_RED);
    return true;
  }
  
  /**
   * cell
   **/
  boolean cell() {
    InterCellInfo inter = Board.cells[306].interCellInfo[300];
    if(inter.range == 12 && inter.isDiag && !inter.isInline || Board.cells[306].isWall && inter.range == (Board.maxAOERange+1) || Board.cells[300].isWall && inter.range == (Board.maxAOERange+1)) 
      debugC("Cell OK",COLOR_GREEN);
    else {
      if(inter.range != 12) debugC("Cell KO: 300-306 range(12) = "+ inter.range, COLOR_RED);
      if(!inter.isDiag) debugC("Cell KO: 300-306 not is diag", COLOR_RED);
      if(!inter.isInline) debugC("Cell KO: 300-306 is inline", COLOR_RED);
    }
    debug("Legend: 300 and 306 = blue");
    GameDebug.addBackground(true, 306, COLOR_BLUE);
    GameDebug.addBackground(true, 300, COLOR_BLUE);
    debug("Legend: trajectory 306-> 241, 288->163, 305->531 = green");
	GameDebug.addOperation(true);
	Array<integer> listCells = Board.cells[306].getTrajectory(Board.cells[241]);
	GameDebug.addOperation(true,"getTrajectory");
    GameDebug.addBackground(true, listCells, COLOR_GREEN);
    GameDebug.addBackground(true, Board.cells[288].getTrajectory(Board.cells[163]), COLOR_GREEN);
    GameDebug.addBackground(true, Board.cells[305].getTrajectory(Board.cells[531]), COLOR_GREEN);
    return true;
  }
  
  /**
   * cellRound
   **/
  boolean cellRound() {
    return true;
  }

  /**
   * chain
   * TODO: chain test
   **/
  boolean chain() {
    return true;
  }
  
  /**
   * effect
   **/
  boolean effect() {
    if(meRound.weapon!.tool.effects[0].owner.shortString() == "Weapon(magnum)" && meRound.weapon!.tool.effects[0].minEffect == 25) 
      debugC("Effect OK", COLOR_GREEN);
    else 
      debugC("Effect on setWepon (magnum) KO", COLOR_RED);
    //GameDebug.add(true, meRound.weapon!.tool.effects,"current weapon effects",2);
    return true;
  }
  
  /**
   * functions
   * TODO: function test
   **/
  boolean functions() {
    return true;
  }
  
  /**
   * leek
   **/
  boolean leek() {
    //GameDebug.add(true, Board.me,"me",2);
    if(Board.me.categoryDamage[1].shortString() == "Chip(chip ice)" && Board.me.categoryProtection[0].shortString() == "Chip(chip helmet)")
      debugC("Leek OK", COLOR_GREEN);
    else 
      debugC("Leek me KO", COLOR_RED);
    return true;
  }
  
  /**
   * leekRound
   **/
  boolean leekRound() {
    meRound.getRelativeCenter()
    //GameDebug.add(true, enemyRound,"enemyRound",2);
    debug("Legend: path to relative center = red");
    GameDebug.addBackground(true, meRound.pathToCenter as Array<integer>, COLOR_RED);
    if(enemyRound.minTP == 10 && enemyRound.maxAOERange == 10 && enemyRound.currentCell.cell.id == enemyRound.currentCellId)
      debugC("LeekRound OK", COLOR_GREEN);
    else 
      debugC("LeekRound enemyRound KO", COLOR_RED);    
    return true;
  }
  
  /**
   * roundTest
   **/
  boolean roundTest() {
	GameDebug.addOperation(true, "avant clonage");
	Round newRound = new Round(currentRound);
	GameDebug.addOperation(true,"cout clonage");
	newRound.update();
	GameDebug.addOperation(true,"cout update");
    return true;
  }
  
  /**
   * tool
   **/
  boolean tool() {
    return true;
  }
  
  /**
   * toolRound
   **/
  boolean toolRound() {
	meRound.moveToCell(enemyRound.currentCellId);
	if(canUseWeaponOnCell(enemyRound.currentCellId)) {
	  Round simulation = new Round(currentRound);
	  Round oldRound = new Round(currentRound);
	  MeRound meSim = simulation.meRound;
	  if(meSim.toolsRound[CHIP_PROTEIN]) meSim.toolsRound[CHIP_PROTEIN]!.simulateUse();
	  Object simValues = meSim.weapon!.simulateUse([enemyRound.id],[1.0]);
	  GameDebug.add(true,simValues,"simulation des degats du tir");
	  Object simErosion = { 
	    maxErosion: (oldRound.enemiesRound[0].minTotalLife-simulation.enemiesRound[0].minTotalLife),
		minErosion: (oldRound.enemiesRound[0].maxTotalLife-simulation.enemiesRound[0].maxTotalLife),
		midErosion: (oldRound.enemiesRound[0].midTotalLife-simulation.enemiesRound[0].midTotalLife)
	  }
	  GameDebug.add(true, simErosion, "simulation de l erosion")
	  if(meRound.toolsRound[CHIP_PROTEIN]) useChip(CHIP_PROTEIN);
	  useWeaponOnCell(enemyRound.currentCellId);
	  currentRound.update();
	  GameDebug.add(true, oldRound.enemiesRound[0].minLife+"-"+enemyRound.minLife+"="+(oldRound.enemiesRound[0].minLife-enemyRound.minLife), "degat reel par comparaison des rounds")
	  GameDebug.add(true, oldRound.enemiesRound[0].minTotalLife+"-"+enemyRound.minTotalLife+"="+(oldRound.enemiesRound[0].minTotalLife-enemyRound.minTotalLife), "erosion reel par comparaison des rounds")
	}
    return true;
  }
  
}
