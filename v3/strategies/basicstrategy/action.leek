/******************************************************************************
 * Action (Abstract)
 ******************************************************************************/
class Action extends Objects {
  
  /**
   * simulateUse
   **/
  Object simulate(Round roundObj) {
    return {minEffect:0,maxEffect:0,midEffect:0};
  }
	
  /**
   * execute
   **/
  void execute() {
  }
}

/******************************************************************************
 * MoveAction
 ******************************************************************************/
class MoveAction extends Action {

  integer cellId;
  integer ownerId;
  integer usedMP;

  /**
   * constructor
   * Attention: le toolRound et le targetCell doivent appartenir au meme round
   **/
  constructor(integer cellId, integer ownerId, integer usedMP) {
	this.cellId = cellId;
	this.ownerId = ownerId;
	this.usedMP = usedMP;
  }

  /**
   * simulateUse
   **/
  Object simulate(Round roundObj) {
    roundObj.leeksRound[ownerId]!.simulateMoveToCell(cellId, usedMP)
    return {minEffect:0,maxEffect:0,midEffect:0};
  }

  /**
   * execute
   **/
  void execute() {
	Board.currentRound.meRound.moveToCell(cellId);
  }
	
  /**
   * string
   **/
  string string() {
    return shortString();
  }
  string shortString() {
    return this.class.name+": "+Board.leeks[ownerId]!.name+" go to "+cellId;
  }

}

/******************************************************************************
 * ToolAction
 ******************************************************************************/
class ToolAction extends Action {

  integer toolId;
  integer targetCell;
  integer ownerId;

  /**
   * constructor
   * Attention: le toolRound et le targetCell doivent appartenir au meme round
   **/
  constructor(integer ownerId, integer toolId, integer targetCell) {
	this.toolId = toolId;
	this.targetCell = targetCell;
	this.ownerId = ownerId;
  }

  /**
   * simulateUse
   **/
  Object simulate(Round roundObj) {
    return roundObj.leeksRound[ownerId]!.toolsRound[toolId]!.simulateUseOnCell(targetCell);
  }

  void execute() {
    Board.currentRound.meRound.toolsRound[toolId]!.useOnCell(targetCell);
  }
	
  /**
   * string
   **/
  string string() {
    return shortString();
  }
  string shortString() {
    return this.class.name+": "+Board.leeks[ownerId]!.name+" use "+TOOL_NAME_TRANSLATOR[toolId]!+" on "+targetCell;
  }

}
