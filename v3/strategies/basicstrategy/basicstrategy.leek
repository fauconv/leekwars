include("basicstrategyrules");
include("movecell");
include("relativecell");

/****************************************************************************
 * BasicStrategy
 ****************************************************************************/
class BasicStrategy extends Strategy {
  
  static Enemy enemy;          
  static integer enemyId;
  static MeRound meRound;       // MeRound
  static EnemyRound enemyRound;    // EnemyRound
  static Round currentRound;  // Round
  static Array<Simulation> mySoluces = []; // l id des soluce correspond a l id de l index du tableau comme si c etait une map
  
  /**
   * isValide
   *
   * refuse les match avec AOE, en groupe, ou avec bulb
   **/
  static boolean isValide() {
    if(count(Board.enemies) > 1) return false;
    enemy = Board.enemies[0];
    enemyId = enemy.id;
    return isEmpty(enemy.categoryBulb);
  }
  
  /**
   * apply
   **/
  void apply() {
    currentRound = Board.currentRound;
    meRound = currentRound.meRound;
    enemyRound = currentRound.enemiesRound[0];
    
	//
	// first round
	//
    if(gFirstRound) {
      moveTowardCell(meRound.getRelativeCenter().id);
	  setWeapon(meRound.weaponsRound[0].id)
      return;
    }
	  
	//
	// other rounds
	//
	
	//
	// phase 1 : on determine les mouvements possibles de mon poireau
	// phase 1.1 : on determine quel chip utilisable pour se mouvoir => simulations
	//
	Array<Simulation> myMPToolList = MPConditions(meRound);
	GameDebug.add(BASIC_STRATEGY_DEBUG, myMPToolList,"",1,[], [], [], "string");
	  
	//
	// phase 1.2 : on calcul chaque mouvement possible et chaque simulation impliquee
	//
	Map<integer,MoveCell> myMoveCells = parcour(meRound.currentCell, myMPToolList, meRound.id)
	if(BASIC_STRATEGY_DEBUG) {
	  for(MoveCell mc in myMoveCells) {
	    mark(mc.id,COLOR_YELLOW,1);
		markText(mc.id,count(mc.simulations),0,1);
	  }
    }
	
	//
	// phase 2 : on determine les tire et degat possible
	// phase 2.1: on determine pour chaque arme les relativeCell possible
	//
	GameDebug.add(BASIC_STRATEGY_DEBUG,meRound.categoryDamage,"liste des armes");
	Map<integer, RelativeCell> enemyRelativeCells = getRelativeCells(meRound.categoryDamage, enemyRound);
	if(BASIC_STRATEGY_DEBUG) {
	  for(RelativeCell mc in enemyRelativeCells) {
	    mark(mc.id,COLOR_YELLOW,1);
		markText(mc.id,count(mc.toolsIdsList),0,1);
	  }
    }
	  
	//
	// phase 3 : on determine les mouvement de retraite
	//
	
	//
	// phase 4 : on determine les chip de soin et de protection a utiliser
	//
	
	//
	// phase 5 : on choisi la meilleure soluce
	//
	
  }

	
  /**
   * parcour
   * Attention: on utilise le round de la startCell comme reference pour determiner la position 
   * des poireaux
   * TODO: ajouter la gestion de la chip de saut
   **/
  Map<integer,MoveCell> parcour(CellRound startCell, Array<Simulation> simulations, integer leekId) {
	  
	integer maxRemainingMP = 0;
	Array<integer> remainingMPBySimulation = [];
	for(Simulation sim in simulations) {
	  integer mp = sim.roundObj.leeksRound[leekId]!.minMP;
	  (mp > maxRemainingMP) and (maxRemainingMP = mp);
	  push(remainingMPBySimulation, mp);
	}
	Cell voisin;
	Array<CellRound> referenceBoard = startCell.roundObj.cellsRound;
		
    Map<integer,Array<Cell>> reachableCells = [maxRemainingMP:[startCell.cell]] //reachableCells[remainingMP][] = cell
    Map<integer,MoveCell> flatReachableCells = [startCell.id:new MoveCell(startCell.cell, leekId, simulations, remainingMPBySimulation, maxRemainingMP)]
    
    for(integer i = maxRemainingMP; i > 0; i--) {
      integer futurMP = i-1
      reachableCells[futurMP] = [];
	  Array<Simulation> remainingSimulation2 = [];
	  Array<integer> remainingMPBySimulation2 = [];
	  for(integer index: integer remainingMP in remainingMPBySimulation) {
		if(remainingMP > 0) {
		  push(remainingMPBySimulation2,remainingMP-1);
		  push(remainingSimulation2, simulations[index]);
		}
	  }
	  remainingMPBySimulation = remainingMPBySimulation2;
	  simulations = remainingSimulation2;
      for(Cell cell2 in reachableCells[i]!) {
        for(string direction in LINE_DIRECTION) {
          if(!(voisin = cell2[direction] as Cell) || voisin.isWall) continue
          integer voisinId = voisin.id;
          LeekRound|null leekvoisin = referenceBoard[voisinId].leekOnCell;
          if(!mapContainsKey(flatReachableCells, voisinId) && (!leekvoisin || leekvoisin!.id == leekId)) { // dans le cas d un deuxieme appel a parcour il se peut qu on retombe sur la position initial du poireau concerne
            push(reachableCells[futurMP]!, voisin);
            flatReachableCells[voisinId] = new MoveCell(voisin, leekId, simulations, remainingMPBySimulation, futurMP);
		  }
        }
      }
    }
    return flatReachableCells
	  
  }
  
  /**
   * getRelativeCells
   **/
  Map<integer,RelativeCell> getRelativeCells(Array<ToolRound>|Map<integer,ToolRound> toolsRound, LeekRound targetLeek) {
    Map<integer,RelativeCell> ret = [:];
	integer leekId = targetLeek.id;
	integer targetCellId = targetLeek.currentCellId;
	Cell reachableCell = targetLeek.currentCell.cell;
	for(ToolRound toolRound in toolsRound) {
      integer toolId = toolRound.id;
	  Tool tool = toolRound.tool;
      if(ret[targetCellId]) push(ret[targetCellId]!.toolsIdsList,toolId);
	  else ret[targetCellId] = new RelativeCell(targetCellId, 1.0, leekId, targetCellId, toolId);		
      if(tool.isAOE) {
        if(tool.AOELaunchType == LAUNCH_TYPE_CIRCLE) { //  ------------ LAUNCH_TYPE_CIRCLE
          for(string direction in HEIGHT_DIRECTION) {
			reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
			  pourcent -= AOE_DEC_LINE_FACTOR;
			  reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
            }
          }
          for(string direction in WIDTH_DIRECTION) {
            reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
			  pourcent -= AOE_DEC_LINE_FACTOR;
			  reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
              for(string direction2 in HEIGHT_DIRECTION) {
                Cell reachableCell2 = reachableCell;
                var pourcent2 = pourcent;
                for(var i2 = (i-1); i2 > 0; i2--) {
                  pourcent2 -= AOE_DEC_LINE_FACTOR;
			      reachableCell2 = addRelativeCell(ret,reachableCell2,direction2,toolId,pourcent2,leekId,targetCellId);
                }
              }
            }
          }
        } else if(tool.AOELaunchType == LAUNCH_TYPE_SQUARE) { //  ---------  LAUNCH_TYPE_SQUARE
          for(var direction in HEIGHT_DIRECTION) {
            reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(integer i = tool.AOERange; i > 0; i--) {
			  pourcent -= AOE_DEC_LINE_FACTOR;
			  reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
            }
          }
          for(string direction in WIDTH_DIRECTION) {
            reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
              for(var direction2 in HEIGHT_DIRECTION) {
                Cell reachableCell2 = reachableCell;
                var pourcent2 = pourcent;
                for(var i2 = tool.AOERange; i2 > 0; i2--) {
                  pourcent2 -= AOE_DEC_LINE_FACTOR;
			      reachableCell2 = addRelativeCell(ret,reachableCell2,direction2,toolId,pourcent2,leekId,targetCellId);
                }
              }
            }
          }
        } else if(tool.AOELaunchType == LAUNCH_TYPE_DIAGONAL) { //  ---------   LAUNCH_TYPE_DIAGONAL 
          for(var direction in DIAG_DIRECTION) {
            reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_DIAG_FACTOR;
              reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
            }
          }
        } else  { // ------       LAUNCH_TYPE_LINE
          for(var direction in LINE_DIRECTION) {
            reachableCell = targetLeek.currentCell.cell;
            real pourcent = 1.0;
            for(var i = tool.AOERange; i > 0; i--) {
              pourcent -= AOE_DEC_LINE_FACTOR;
			  reachableCell = addRelativeCell(ret,reachableCell,direction,toolId,pourcent,leekId,targetCellId);
            }
          }
        }
      }
	}
	return ret;
  }

  /**
   * addRelativeCell
   * macro pour getRelativeCells
   **/
  private Cell addRelativeCell(Map<integer,RelativeCell> ret, Cell reachableCell, string direction, integer toolId, real pourcent, integer leekId, integer targetCellId) {
    if(reachableCell = reachableCell[direction] as Cell) {
      if(ret[reachableCell.id]) push(ret[reachableCell.id]!.toolsIdsList,toolId)
	  else ret[reachableCell.id] = new RelativeCell(reachableCell.id, pourcent, leekId, targetCellId, toolId);
	}
	return reachableCell;
  }
}

